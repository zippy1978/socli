schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
"action_dispatch_uploaded_file"
scalar File
"An ISO 8601-encoded date"
scalar ISO8601Date
"An ISO 8601-encoded datetime"
scalar ISO8601DateTime
scalar Json
"ETH amount expressed in wei as a string"
scalar WeiAmount
"An Account"
type Account implements Node {
  accountable: Accountable!
  id: ID!
  oldId: String @deprecated(reason: "Use id field")
  owner: AccountOwner
}
"An action reward"
type ActionReward implements Node {
  action: Action!
  id: ID!
  pickSize: Int!
  "The `pickable_players` field cannot be nested within a list."
  pickablePlayers: [PickablePlayer!]!
  "The `reward_cards` field cannot be nested within a list."
  rewardCards: [RewardCard!]!
  shippingState: ShippingState!
}
"An object representing the activity action reward status of a user"
type ActivityActionRewardStatus {
  claimedCount: Int!
  limit: Int!
  nextAt: ISO8601DateTime
}
type Age {
  cutOffDate: ISO8601Date!
  max: Int
  min: Int
}
"An announcement"
type Announcement implements Node {
  content: String!
  createdAt: ISO8601DateTime!
  id: ID!
  title: String!
}
"The connection type for Announcement."
type AnnouncementConnection {
  "A list of edges."
  edges: [AnnouncementEdge!]!
  "A list of nodes."
  nodes: [Announcement!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type AnnouncementEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Announcement
}
"A user notification regarding an Announcement"
type AnnouncementNotification implements Node & NotificationInterface {
  announcement: Announcement!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  read: Boolean!
  sport: Sport
  user: CurrentUser!
}
"An anonymous User"
type AnonymousUser implements BlockchainUserInterface & Node {
  cardsCount: Int!
  ethVaultId: Int
  ethereumAddress: String!
  id: ID!
  sorareAddress: String
  starkKey: String
  starkKeyRegistered: Boolean!
}
"A user notification regarding an Auction"
type AuctionNotification implements Node & NotificationInterface {
  auction: BundledAuction!
  bid: Bid
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  read: Boolean!
  sport: Sport
  tokenAuction: TokenAuction!
  tokenBid: TokenBid
  user: CurrentUser!
}
type AverageScoreOpenBoundaries {
  averageType: AveragePlayerScore!
  count: Int!
  max: Int
  min: Int
}
"The average score players count rule of a So5Leaderboard"
type AverageScorePlayersCount {
  max: AverageScoreOpenBoundaries @deprecated(reason: "No longer maintained")
  min: AverageScoreOpenBoundaries @deprecated(reason: "No longer maintained")
}
"Banner metadata"
type Banner {
  description: String!
  desktopPictureUrl: String!
  id: String!
  mobilePictureUrl: String!
  title: String!
  url: String!
}
"A collection of banners"
type BannersSet {
  banners: [Banner!]!
  id: String!
  title: String!
}
"A Bid in an auction"
type Bid implements Node {
  "Bid amount, in wei."
  amount: String!
  bidder: BlockchainUser
  createdAt: ISO8601DateTime!
  englishAuction: BundledAuction!
  fiatPayment: Boolean!
  id: ID!
}
"The connection type for Bid."
type BidConnection {
  "A list of edges."
  edges: [BidEdge!]!
  "A list of nodes."
  nodes: [Bid!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type BidEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Bid
}
"A bid with conversion rates"
type BidWithRates implements Node {
  "Bid amount, in wei."
  amount: String!
  amountInFiat: Fiat!
  bidder: BlockchainUser
  createdAt: ISO8601DateTime!
  englishAuction: BundledAuction!
  fiatPayment: Boolean!
  id: ID!
}
"An Auction on a bundle of Cards"
type BundledAuction implements EnglishAuctionInterface & Node {
  bestBid: BidWithRates
  "The `bids` field cannot be nested within a list."
  bids(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): BidConnection!
  bidsCount: Int!
  blockchainId: String!
  cancelled: Boolean!
  cards: [Card!]!
  contentProvider: EnglishAuctionContentProvider
  creditCardFee: Float!
  "Current price, in wei."
  currentPrice: String!
  endDate: ISO8601DateTime!
  id: ID!
  "Minimum next bid amount, in wei."
  minNextBid: String!
  open: Boolean!
  slug: String!
  startDate: ISO8601DateTime!
  tokenAuction: TokenAuction!
}
"The connection type for BundledAuction."
type BundledAuctionConnection {
  "A list of edges."
  edges: [BundledAuctionEdge!]!
  "A list of nodes."
  nodes: [BundledAuction!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type BundledAuctionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: BundledAuction
}
"A card representing a professional football player"
type Card implements CardGameInterface & CardMarketInterface & Node & WithPictureInterface & WithSubscriptionsInterface {
  age: Int
  assetId: String
  belongsToUser: Boolean! @deprecated(reason: "subscriptions do not scale if user dependent")
  birthTxHash: String
  blockchain: String!
  blockchainId: String
  canBuy: Boolean!
  canSell: Boolean! @deprecated(reason: "Not optimized")
  cardEdition: CardEdition @deprecated(reason: "moved to card factory")
  cardPrint: CardPrint @deprecated(reason: "Use cardEdition and layout instead")
  club: Club @deprecated(reason: "replaced by team")
  coverageStatus: CardCoverageStatus!
  createdAt: ISO8601DateTime!
  currentSeasonBonus: Boolean! @deprecated(reason: "replaced by power breakdown")
  currentUserSubscription: EmailSubscription
  customCardEditionName: String
  displayRarity: String!
  gameForFixture(so5FixtureSlug: String = null, so5LeaderboardSlug: String = null): Game @deprecated(reason: "Use `gameForLeague` instead")
  gameForLeague(so5LeagueSlug: String = null, so5LeaderboardSlug: String = null): Game
  "Current card level"
  grade: Int!
  gradeAfterTransfer: Int!
  id: ID!
  inRollup: Boolean!
  latestEnglishAuction: EnglishAuction
  layout: CardLayout @deprecated(reason: "moved to card factory")
  license: License! @deprecated(reason: "moved to card factory")
  liveSingleBuyOffers: [Offer!]!
  liveSingleSaleOffer: SingleSaleOffer
  myMintedSingleSaleOffer: SingleSaleOffer
  name: String!
  nextVaultId: Int @deprecated(reason: "Not needed. This info is provided in prepare mutations")
  notContractOwners: [OwnerWithRates!]!
  onSale: Boolean!
  openEnglishAuction: EnglishAuction
  openForDomesticStats: Boolean!
  openForGameStats: Boolean!
  openForGameStatsCompetitions: [Competition!]!
  "So5Lineup that this card is being used in for the open So5Fixture"
  openedSo5Lineup: So5Lineup
  owner: Owner
  ownerSince: ISO8601DateTime
  ownerWithRates: OwnerWithRates
  owners: [Owner!]! @deprecated(reason: "use notContractOwners")
  pendingWithdrawal: StarkwareWithdrawal
  pictureUrl(derivative: String): String
  player: Player!
  playerInjuries: [Injury!]! @deprecated(reason: "injury data not reliable")
  "The `player_season_picture` field cannot be nested within a list."
  playerSeasonPicture: SeasonPicture @deprecated(reason: "use pictureUrl on player instead")
  position: String!
  "Total card bonus (XP + Season bonus)"
  power(so5LeaderboardSlug: String = null): String!
  powerBreakdown(so5LeaderboardSlug: String = null): PowerBreakdown!
  powerMalusAfterTransfer: String!
  price: String! @deprecated(reason: "not relevant")
  priceRange: Range @deprecated(reason: "Use `Token.priceRange` instead")
  privateMinPrice: String
  publicMinPrice: String
  rarity: String!
  sameClubBonus: Boolean! @deprecated(reason: "replaced by power breakdown")
  scoreForPreviousFixture(so5FixtureSlug: String!): Int! @deprecated(reason: "use the So5Scores of the player instead")
  season: Season!
  serialNumber: Int!
  shirtNumber: Int
  singleCivilYear: Boolean!
  slug: String!
  starkwareTokenId: String
  subscriptionsCount: Int!
  team: Team!
  "The `team_picture_url` field cannot be nested within a list."
  teamPictureUrl(derivative: String): String @deprecated(reason: "use pictureUrl on team instead")
  token: Token
  tradeableStatus: Tradeable!
  u23Eligible: Boolean!
  user: User
  userOwner: UserOwner
  userOwnerWithRate: UserOwnerWithRates @deprecated(reason: "replaced by ownerWithRate")
  userOwners: [UserOwner!]! @deprecated(reason: "use notContractOwners")
  userOwnersWithRate: [UserOwnerWithRates!]! @deprecated(reason: "use notContractOwners")
  vaultId: Int @deprecated(reason: "Not needed. This info is provided in prepare mutations")
  visible: Boolean!
  walletStatus: WalletStatus!
  xp: Int!
  xpAfterTransfer: Int!
  "XP start range of current card level"
  xpNeededForCurrentGrade: Int!
  "XP end range of current card level"
  xpNeededForNextGrade: Int
}
"A collection of cards"
type CardCollection implements Node {
  backgroundPictureUrl: String
  bannerPictureUrl: String
  complete(forUserSlug: String!): Boolean!
  emptySlotBackgroundPictureUrl: String
  fulfilledSlotsCount(forUserSlug: String!): Int!
  id: ID!
  name: String!
  slots: [CardCollectionSlot!]!
  slotsCount: Int!
  slug: String!
  "The `social_picture_urls` field cannot be nested within a list."
  socialPictureUrls(forUserSlug: String!): SocialPictureDerivative!
  subtitle: String!
  team: Team
}
"A slot in a collection of cards"
type CardCollectionCard implements Node {
  card: Card!
  highlighted: Boolean
  id: ID!
}
"A user notification regarding a Card Collection"
type CardCollectionNotification implements Node & NotificationInterface {
  card: Card
  cardCollection: CardCollection!
  cardCollectionSlot: CardCollectionSlot
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  read: Boolean!
  sport: Sport
  user: CurrentUser!
}
"A slot in a collection of cards"
type CardCollectionSlot implements Node {
  cardCollectionCards(forUserSlug: String!): [CardCollectionCard!]!
  cardPictureUrl: String!
  customCardEditionName: String
  displayedRequirements: String
  id: ID!
  player: Player!
  rarity: Rarity
  season: Season
  serialNumber: Int
  team: Team
  transferMarketFilters: String!
}
"The connection type for Card."
type CardConnection {
  "A list of edges."
  edges: [CardEdge!]!
  "A list of nodes."
  nodes: [Card!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"A user card count breakdown"
type CardCount {
  common: Int!
  customSeries: Int!
  limited: Int!
  rare: Int!
  superRare: Int!
  total: Int!
  unique: Int!
}
"A card dropped during onboarding"
type CardDrop {
  pictureUrl: String!
  slug: String!
}
"An edge in a connection."
type CardEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Card
}
"Represents a card edition"
type CardEdition implements Node & WithPublicCardsInterface {
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  displayName: String!
  id: ID!
  name: String!
}
"Enforces restrictions on specific card editions of submitted lineups"
type CardEditionCount {
  "The display name of the card edition on which this rule would apply"
  displayName: String!
  max: Int
  min: Int
  "The name of the card edition on which this rule would apply"
  name: String!
}
"Enforces restrictions on card editions of submitted lineups"
type CardEditionsCount {
  "Card editions on which restrictions are applied with their additional restrictions, if any"
  editions: [CardEditionCount!]!
  max: Int
  min: Int
}
"Represents a card layout"
type CardLayout {
  backgroundMaskUrl: String
  backgroundUrl: String
  layerUrl: String @deprecated(reason: "Use layers instead")
  layers: [String!]!
  playerMaskUrl: String
  teamLogoUrl: String @deprecated(reason: "Legacy")
}
"A user notification regarding a Card"
type CardNotification implements Node & NotificationInterface {
  card: Card
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  read: Boolean!
  sport: Sport
  token: Token
  tokenWithdrawal: TokenWithdrawal
  user: CurrentUser!
  withdrawal: StarkwareWithdrawal
}
"A CardOffer links a Card to an Offer"
type CardOffer implements Node {
  card: Card
  id: ID!
  offer: Offer!
  rarity: String!
}
"Represents a print of a card"
type CardPrint implements Node {
  backgroundUrlByRarity(derivative: String): Json! @deprecated(reason: "Use card.layout instead")
  cardEdition: CardEdition!
  clubUrl: String @deprecated(reason: "Use card.layout instead")
  id: ID!
  layoutByRarity: RaritiesCardLayout! @deprecated(reason: "Use card.layout instead")
  maskUrl: String @deprecated(reason: "Use card.layout instead")
}
"The supply of cards for a Player in a Season"
type CardSeasonSupply {
  limited: Int!
  player: Player!
  rare: Int!
  season: Season!
  superRare: Int!
  unique: Int!
}
"A card representing a professional football player"
type CardSubscription implements CardGameInterface & CardMarketInterface & Node & WithPictureInterface & WithSubscriptionsInterface {
  age: Int
  assetId: String
  belongsToUser: Boolean! @deprecated(reason: "subscriptions do not scale if user dependent")
  birthTxHash: String
  blockchain: String!
  blockchainId: String
  canBuy: Boolean!
  canSell: Boolean! @deprecated(reason: "Not optimized")
  cardEdition: CardEdition @deprecated(reason: "moved to card factory")
  cardPrint: CardPrint @deprecated(reason: "Use cardEdition and layout instead")
  club: Club @deprecated(reason: "replaced by team")
  coverageStatus: CardCoverageStatus!
  createdAt: ISO8601DateTime!
  currentSeasonBonus: Boolean! @deprecated(reason: "replaced by power breakdown")
  currentUserSubscription: EmailSubscription
  customCardEditionName: String
  displayRarity: String!
  eventType: CardWasUpdatedEvent!
  gameForFixture(so5FixtureSlug: String = null, so5LeaderboardSlug: String = null): Game @deprecated(reason: "Use `gameForLeague` instead")
  gameForLeague(so5LeagueSlug: String = null, so5LeaderboardSlug: String = null): Game
  "Current card level"
  grade: Int!
  gradeAfterTransfer: Int!
  id: ID!
  inRollup: Boolean!
  latestEnglishAuction: EnglishAuction
  layout: CardLayout @deprecated(reason: "moved to card factory")
  license: License! @deprecated(reason: "moved to card factory")
  liveSingleBuyOffers: [Offer!]!
  liveSingleSaleOffer: SingleSaleOffer
  myMintedSingleSaleOffer: SingleSaleOffer
  name: String!
  nextVaultId: Int @deprecated(reason: "Not needed. This info is provided in prepare mutations")
  notContractOwners: [OwnerWithRates!]!
  onSale: Boolean!
  openEnglishAuction: EnglishAuction
  openForDomesticStats: Boolean!
  openForGameStats: Boolean!
  openForGameStatsCompetitions: [Competition!]!
  "So5Lineup that this card is being used in for the open So5Fixture"
  openedSo5Lineup: So5Lineup
  owner: Owner
  ownerSince: ISO8601DateTime
  ownerWithRates: OwnerWithRates
  owners: [Owner!]! @deprecated(reason: "use notContractOwners")
  pendingWithdrawal: StarkwareWithdrawal
  pictureUrl(derivative: String): String
  player: Player!
  playerInjuries: [Injury!]! @deprecated(reason: "injury data not reliable")
  "The `player_season_picture` field cannot be nested within a list."
  playerSeasonPicture: SeasonPicture @deprecated(reason: "use pictureUrl on player instead")
  position: String!
  "Total card bonus (XP + Season bonus)"
  power(so5LeaderboardSlug: String = null): String!
  powerBreakdown(so5LeaderboardSlug: String = null): PowerBreakdown!
  powerMalusAfterTransfer: String!
  price: String! @deprecated(reason: "not relevant")
  priceRange: Range @deprecated(reason: "Use `Token.priceRange` instead")
  privateMinPrice: String
  publicMinPrice: String
  rarity: String!
  sameClubBonus: Boolean! @deprecated(reason: "replaced by power breakdown")
  scoreForPreviousFixture(so5FixtureSlug: String!): Int! @deprecated(reason: "use the So5Scores of the player instead")
  season: Season!
  serialNumber: Int!
  shirtNumber: Int
  singleCivilYear: Boolean!
  slug: String!
  starkwareTokenId: String
  subscriptionsCount: Int!
  team: Team!
  "The `team_picture_url` field cannot be nested within a list."
  teamPictureUrl(derivative: String): String @deprecated(reason: "use pictureUrl on team instead")
  token: Token
  tradeableStatus: Tradeable!
  u23Eligible: Boolean!
  user: User
  userOwner: UserOwner
  userOwnerWithRate: UserOwnerWithRates @deprecated(reason: "replaced by ownerWithRate")
  userOwners: [UserOwner!]! @deprecated(reason: "use notContractOwners")
  userOwnersWithRate: [UserOwnerWithRates!]! @deprecated(reason: "use notContractOwners")
  vaultId: Int @deprecated(reason: "Not needed. This info is provided in prepare mutations")
  visible: Boolean!
  walletStatus: WalletStatus!
  xp: Int!
  xpAfterTransfer: Int!
  "XP start range of current card level"
  xpNeededForCurrentGrade: Int!
  "XP end range of current card level"
  xpNeededForNextGrade: Int
}
"A challenge"
type Challenge implements Node {
  completed: Boolean
  description: String!
  id: ID!
}
"A user notification regarding a challenge"
type ChallengeNotification implements Node & NotificationInterface {
  challenge: Challenge!
  challengeable: Challengeable!
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  read: Boolean!
  sport: Sport
  user: CurrentUser!
}
type Club implements Node & TeamInterface & WithSubscriptionsInterface {
  activeCompetitions: [Competition!]!
  "The `active_memberships` field cannot be nested within a list."
  activeMemberships(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): MembershipConnection!
  "The `active_players` field cannot be nested within a list."
  activePlayers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  code: String
  colorBottom: String @deprecated(reason: "replaced by colorRight on customBanner")
  colorTop: String @deprecated(reason: "replaced by colorLeft on customBanner")
  country: Country!
  currentUserSubscription: EmailSubscription
  customBanner: CustomBanner
  domesticLeague: Competition
  founded: String
  "The `games` field cannot be nested within a list."
  games(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Start time (inclusive) of the game."
    startDate: ISO8601DateTime!,
    "End time (inclusive) of the game."
    endDate: ISO8601DateTime!
  ): GameConnection!
  id: ID!
  lastFiveGames: [Game!]!
  "The `latest_games` field cannot be nested within a list."
  latestGames(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): GameConnection!
  license: License! @deprecated(reason: "only exposed on cards")
  name: String!
  optaId: String
  pictureSecondaryUrl: String
  pictureUrl(derivative: String): String
  pictureUrlByRarity(derivative: String): Json! @deprecated(reason: "Replaced teamPictureUrl on CardType")
  "The `players` field cannot be nested within a list."
  players(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  ready: Boolean!
  "The `recent_departures` field cannot be nested within a list."
  recentDepartures(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  "Returns the top 3 of the league, excluding the current club"
  relatedClubs: [Club!]
  slug: String!
  subscriptionsCount: Int!
  upcomingGames(first: Int!): [Game]!
}
"The connection type for Club."
type ClubConnection {
  "A list of edges."
  edges: [ClubEdge!]!
  "A list of nodes."
  nodes: [Club!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type ClubEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Club
}
"A Common Account"
type CommonAccount implements Node {
  id: ID!
}
"A common draft campaign"
type CommonDraftCampaign implements Node {
  autoPick(selectedPrintablePlayerIds: [ID!]): [DraftablePlayer!]!
  "The `available_players` field cannot be nested within a list."
  availablePlayers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "The position to filter on or empty for the extra positions"
    position: Position,value: RangeInput, teamSlugs: [String!], sortType: AvailableDraftPlayersSortInput, 
    "Full text search query to filter cards"
    query: String,selectedPrintablePlayerIds: [ID!]  ): DraftablePlayerConnection!
  budget: Int!
  campaignType: CommonDraftCampaignType!
  "The `drafted_players` field cannot be nested within a list."
  draftedPlayers: [DraftablePlayer!]!
  id: ID!
  positions: [Position!]!
  slug: String!
  status: CommonDraftCampaignStatus!
  teams: [Team!]!
}
"A professional football competition"
type Competition implements Node & WithPictureInterface {
  "The `clubs` field cannot be nested within a list."
  clubs(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): ClubConnection!
  "The `contestants` field cannot be nested within a list."
  contestants(seasonStartYear: Int!): [Contestant!]!
  country: Country
  customBanner: CustomBanner
  displayName: String!
  format: CompetitionFormat!
  id: ID!
  name: String!
  openForGameStats: Boolean!
  pictureUrl(derivative: String): String
  "The `players_by_last_five_average` field cannot be nested within a list."
  playersByLastFiveAverage(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  released: Boolean!
  "The `seasons` field cannot be nested within a list."
  seasons: [Season!]!
  slug: String!
  type: CompetitionType!
}
"The frontend config"
type Config {
  activateStarkware: Boolean! @deprecated(reason: "Migration completed")
  algoliaApplicationId: String!
  algoliaIndexSuffix: String!
  algoliaSearchApiKey: String!
  bankAddress: String!
  banners: [BannersSet!]!
  baseballTokensAddress: String!
  cardPowerCap: Float! @deprecated(reason: "Useless")
  cdnEnabled: Boolean @deprecated(reason: "Always enabled")
  defaultFiatCurrency: FiatCurrency!
  draftMajorCompetitions: [String!]! @deprecated(reason: "Draft does not exist anymore")
  ethAssetType: String!
  ethQuantum: String!
  ethereumEndpoint: String!
  ethereumNetworkId: String!
  exchangeRate: ExchangeRate!
  footballNationalSeriesTokensAddress: String!
  frontendAssetsHost: String!
  heroBanners: [HeroBannersSet!]!
  id: ID!
  landingCards: [String!]! @deprecated(reason: "Replaced by landingTheme")
  landingClubCount: String!
  landingClubs: [LandingClub!]!
  landingTheme: LandingTheme
  marketFeeRateBasisPoints(sport: Sport!): Int!
  marketplacePromotionalEvents: [MarketplacePromotionalEvents!]!
  migratorAddress: String
  nbaTokensAddress: String!
  "Fetch teams playing in the upcoming So5 Fixture"
  nextSo5FixtureTeams: [Team!]! @deprecated(reason: "Moved to so5")
  powerHourStartDate: ISO8601DateTime @deprecated(reason: "Not maintained")
  referralCampaign: ReferralCampaign
  relayAddress: String!
  responsiveBanners: [ResponsiveBannersSet!]!
  so5: So5Config!
  so5LeaguesAlgoliaFilters: Json! @deprecated(reason: "Moved to so5")
  sorareCardsAddress: String!
  sorareEncryptionKey: String!
  sorareTokensAddress: String!
  sponsorAccountAddress: String!
  starkExchangeAddress: String
  stripePublicKey: String!
  transferMarketBanner: TransferMarketBanner @deprecated(reason: "Moved to TransferMarketType")
  walletUrl: String!
}
"A contestant"
type Contestant implements Node {
  id: ID!
  matchesDrawn: Int
  matchesLost: Int
  matchesPlayed: Int
  matchesWon: Int
  points: Int
  rank: Int
  team: Team!
}
"A smart contract"
type Contract implements Node {
  addressHex: String!
  blockchain: String!
  id: ID!
  name: String!
}
"A country"
type Country implements Node & WithSubscriptionsInterface {
  "Country code in ISO 3166-1 format."
  code: String!
  currentUserSubscription: EmailSubscription
  flagUrl(size: Int, shape: String): String!
  id: ID!
  slug: String!
  subscriptionsCount: Int!
  threeLetterCode: String
}
"Credit Card"
type CreditCard {
  brand: CreditCardBrand!
  expMonth: Int!
  expYear: Int!
  last4: String!
}
"Current Sorare user"
type CurrentUser implements PublicUserInfoInterface & UserOffersInterface & UserSocialInterface & WithFastWithdrawal & WithFavoriteInterface & WithNotifications & WithReferralsInterface {
  accountEntries(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,significant: Boolean, startDate: ISO8601DateTime, endDate: ISO8601DateTime, sortType: SortingOption, entryType: [UserAccountEntryEntry!]  ): UserAccountEntryConnection!
  activeMintingQuota: MintingQuota
  activityActionRewardStatus: ActivityActionRewardStatus
  allTimeBestDecksInFormation: [DeckInFormation!]! @deprecated(reason: "No longer maintained")
  apiKey: String
  "Current user available balance, in wei."
  availableBalance: String!
  "Current user available balance for withdrawal, in wei."
  availableBalanceForWithdrawal: String!
  awards: [UserAward!]!
  "Current user bank balance, in wei."
  bankBalance: String!
  bankMappedEthereumAddress: String
  bankMappedEthereumAddressApprovedBank: Boolean
  baseballProfile: UserSportProfile
  betaTester: Boolean!
  blockedUntil: ISO8601DateTime
  blockedUsers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserConnection!
  "The `bought_single_sale_offers` field cannot be nested within a list."
  boughtSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `bought_single_sale_token_offers` field cannot be nested within a list."
  boughtSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `buying_english_auctions` field cannot be nested within a list."
  buyingEnglishAuctions(
    "Returns auctions sorted by `startDate` in descending order when set."
    newlyListed: Boolean
  ): [EnglishAuction!]!
  "The `buying_token_auctions` field cannot be nested within a list."
  buyingTokenAuctions(
    "Returns auctions sorted by `startDate` in descending order when set."
    newlyListed: Boolean,sport: [Sport!]  ): [TokenAuction!]!
  cardCounts: CardCount!
  cardsCount: Int!
  coinBalance: Int!
  "Whether the user confirmed their email"
  confirmed: Boolean
  createdAt: ISO8601DateTime!
  "The `custom_decks` field cannot be nested within a list."
  customDecks(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CustomDeckConnection!
  depositedEth: Boolean!
  directOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,direction: OfferDirection!, sortType: SortingOption  ): OfferConnection!
  email: String!
  endedDirectOffersReceived(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption  ): OfferConnection!
  endedDirectOffersSent(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption  ): OfferConnection!
  endedTokenOffersReceived(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
  endedTokenOffersSent(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
  "The `ended_with_no_buyer_single_sale_offers` field cannot be nested within a list."
  endedWithNoBuyerSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `ended_with_no_buyer_single_sale_token_offers` field cannot be nested within a list."
  endedWithNoBuyerSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `english_auctions` field cannot be nested within a list."
  englishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  ethMigration: EthMigration
  ethVaultId: Int
  ethereumAddress: String!
  "Get a starkware conditional transfer request for a fast withdrawal"
  fastWithdrawal(
    "Amount to withdraw, in wei."
    amount: String!,
    "Destination Ethereum address."
    to: String!
  ): FastWithdrawal!
  fastWithdrawals: [FastWithdrawal!]!
  fastWithdrawalsWithRates: [FastWithdrawalWithRates!]!
  favoriteCards: [Card!]! @deprecated(reason: "Use `my_subscriptions` instead")
  favoriteClubs: [Club!]! @deprecated(reason: "Use `my_subscriptions` instead")
  favoritePlayers: [Player!]! @deprecated(reason: "Use `my_subscriptions` instead")
  fiatEnabled: Boolean!
  followed: EmailSubscription
  "The `followers` field cannot be nested within a list."
  followers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!
  "The `following` field cannot be nested within a list."
  following(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!
  footballProfile(variant: UserSportProfileVariant): UserSportProfile
  fromPath: String
  highlightedDeck: HighlightedDeck
  id: ID!
  "Generate a JWT Token"
  jwtToken(
    "Audience claim identifies the intended audience for this token. Consider using a value that uniquely identifies your use case."
    aud: String!
  ): JwtToken!
  "The `live_single_sale_offers` field cannot be nested within a list."
  liveSingleSaleOffers(
    "Returns single sale offers sorted by `startDate` in descending order when set."
    newlyListed: Boolean
  ): [SingleSaleOffer!]! @deprecated(reason: "Use the paginated version instead")
  "The `live_single_sale_token_offers` field cannot be nested within a list."
  liveSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `lost_english_auctions` field cannot be nested within a list."
  lostEnglishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  "The `lost_token_auctions` field cannot be nested within a list."
  lostTokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
  moonpayParams: String!
  mustAcceptTcus: Boolean!
  mySorareAlgoliaKey: String @deprecated(reason: "Not used")
  mySubscriptions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,types: [SubscribableType!], sortType: SortingOption  ): EmailSubscriptionConnection!
  nbaProfile: UserSportProfile
  nickname: String!
  notifications(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Filters notifications by the specified categories when set."
    categories: [NotificationCategoryInput!],
    "Filters notifications by sports"
    sports: [Sport!]
  ): NotificationConnection!
  "Get notifications fields."
  notificationsDetails(
    "Filters notifications by the specified categories when set."
    categories: [NotificationCategoryInput!]
  ): Notifications!
  onboardingStatus: Onboarding!
  otpBackupCodes: [String!] @deprecated(reason: "Security")
  otpProvisioningUri: String!
  otpRequiredForLogin: Boolean!
  "The `paginated_cards` field cannot be nested within a list."
  paginatedCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  "The `paginated_live_single_sale_offers` field cannot be nested within a list."
  paginatedLiveSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  paymentMethods: [PaymentMethod!]!
  pendingDeposits: [PendingDeposit!]!
  pendingDirectOffersReceived(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption  ): OfferConnection!
  pendingDirectOffersSent(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption  ): OfferConnection!
  pendingDirectWithdrawalCount: Int!
  pendingTokenOffersReceived(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
  pendingTokenOffersSent(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
  phoneNumber: String
  phoneNumberVerificationRequested: Boolean!
  phoneNumberVerified: Boolean!
  profile: UserProfile!
  rampSupported: Boolean!
  referee: Boolean!
  refereeReward: ReferralReward
  referralAsReferee: Referral
  referralRewardsCount: Int!
  referralUrl: String!
  "Get the list of referrals"
  referrals(
    "Filters the referrals by sport."
    sport: Sport,
    "Page to retrieve. Defaults to 0."
    page: Int,
    "Maximum number of referrals to return. Defaults to 50."
    pageSize: Int,
    "Filters the returned referrals by `state` when set."
    state: ReferralState
  ): ReferralPaginated!
  referrer: User
  "The `single_sale_offers` field cannot be nested within a list."
  singleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `single_sale_token_offers` field cannot be nested within a list."
  singleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  slug: String!
  "The `sold_single_sale_offers` field cannot be nested within a list."
  soldSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `sold_single_sale_token_offers` field cannot be nested within a list."
  soldSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  sorareAddress: String
  sorareAddressApprovedBank: Boolean!
  sorareAddressApprovedBankPending: String
  sorarePrivateKey: SorarePrivateKey
  sorarePrivateKeyRecovery: String
  spentFiatPaymentIntents(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,startDate: ISO8601DateTime, endDate: ISO8601DateTime, sortType: SortingOption  ): PaymentConnection!
  starkKey: String
  starkKeyRegistered: Boolean!
  "Time left in seconds to confirm email"
  timeLeftForConfirmation: Int
  "The `token_auctions` field cannot be nested within a list."
  tokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
  tokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,direction: OfferDirection!, sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
  "Current user total balance, in wei."
  totalBalance: String!
  unclaimedActionRewards: [ActionReward!]!
  unclaimedReferralRewardsCount: Int!
  unclaimedSo5Rewards: [So5Reward!]!
  unreadNotificationsCount: Int!
  unverifiedPhoneNumber: String
  userSettings: UserSettings!
  withdrawals: [Withdrawal!]!
  withdrawalsWithRates: [WithdrawalWithRates!]!
  "The `won_english_auctions` field cannot be nested within a list."
  wonEnglishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  "The `won_token_auctions` field cannot be nested within a list."
  wonTokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
}
"A custom banner"
type CustomBanner implements Node {
  colorLeft: String
  colorRight: String
  id: ID!
}
"A custom deck"
type CustomDeck implements DeckInterface & Node {
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CardConnection!
  cardsCount: Int!
  deckCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): DeckCardConnection!
  deckCardsCount: Int!
  deckIndex: Int!
  firstCard: Card
  id: ID!
  name: String!
  slug: String!
  user: User
  visible: Boolean!
}
"The connection type for CustomDeck."
type CustomDeckConnection {
  "A list of edges."
  edges: [CustomDeckEdge!]!
  "A list of nodes."
  nodes: [CustomDeck!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type CustomDeckEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: CustomDeck
}
"A decisive action notification"
type DecisiveActionNotification implements Node & NotificationInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  read: Boolean!
  rendering: TitleBodyNotificationRendering
  sport: Sport
  user: CurrentUser!
}
"A deck card"
type DeckCard implements Node {
  card: Card!
  cardIndex: Int
  id: ID!
  label: String
}
"The connection type for DeckCard."
type DeckCardConnection {
  "A list of edges."
  edges: [DeckCardEdge!]!
  "A list of nodes."
  nodes: [DeckCard!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type DeckCardEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DeckCard
}
"A card deck with a formation"
type DeckInFormation implements DeckInterface & Node {
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CardConnection!
  cardsCount: Int!
  category: DeckCategory!
  deckCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): DeckCardConnection!
  deckCardsCount: Int!
  firstCard: Card
  formation: DeckFormation!
  id: ID!
  pictureUrl: String
  slug: String!
  user: User
}
"A user notification regarding a division change"
type DivisionChangeNotification implements Node & NotificationInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  nextSo5Leaderboard: So5Leaderboard
  previousSo5Leaderboard: So5Leaderboard!
  read: Boolean!
  so5LeagueExited: Boolean!
  sport: Sport
  user: CurrentUser!
}
"A draftable player"
type DraftablePlayer implements Node {
  alreadyOwned: Boolean!
  avatarUrl: String!
  id: ID!
  nextGame: Game
  pictureUrl: String!
  player: Player!
  team: Team!
  value: Int!
}
"The connection type for DraftablePlayer."
type DraftablePlayerConnection {
  "A list of edges."
  edges: [DraftablePlayerEdge!]!
  "A list of nodes."
  nodes: [DraftablePlayer!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type DraftablePlayerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DraftablePlayer
}
"A subscription to a Card/Club/Player/Country/User"
type EmailSubscription implements Node {
  id: ID!
  preferences: EmailSubscriptionPreferences!
  slug: String!
  subscribable: Subscribable @deprecated(reason: "Use `subscribableType` and `subscribableSlug` instead")
  subscribableSlug: String!
  subscribableType: String!
  subscriber: Subscriber
  updatedAt: ISO8601DateTime!
}
"The connection type for EmailSubscription."
type EmailSubscriptionConnection {
  "A list of edges."
  edges: [EmailSubscriptionEdge!]!
  "A list of nodes."
  nodes: [EmailSubscription!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type EmailSubscriptionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EmailSubscription
}
"A subscription preferences"
type EmailSubscriptionPreferences {
  notifyForRarities: [String!]!
  slug: String!
}
"An engine configuration"
type EngineConfiguration {
  captain: Float
  grade: Float
  scarcity: Json
  season: Float
  xpMultiplier: Float
}
"An EnglishAuction on a bundle of Cards"
type EnglishAuction implements EnglishAuctionInterface & Node {
  bestBid: BidWithRates
  "The `bids` field cannot be nested within a list."
  bids(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): BidConnection!
  bidsCount: Int!
  blockchainId: String!
  cancelled: Boolean!
  cards: [Card!]!
  contentProvider: EnglishAuctionContentProvider
  creditCardFee: Float!
  "Current price, in wei."
  currentPrice: String!
  endDate: ISO8601DateTime!
  id: ID!
  "Minimum next bid amount, in wei."
  minNextBid: String!
  open: Boolean!
  slug: String!
  startDate: ISO8601DateTime!
  tokenAuction: TokenAuction!
}
"The connection type for EnglishAuction."
type EnglishAuctionConnection {
  "A list of edges."
  edges: [EnglishAuctionEdge!]!
  "A list of nodes."
  nodes: [EnglishAuction!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type EnglishAuctionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EnglishAuction
}
"A withdrawal signature"
type EthBankWithdrawalIntent {
  amount: String!
  nonce: Int!
  signature: String!
  user: CurrentUser!
}
"Payload required to make a Starkware deposit"
type EthDeposit {
  assetType: String!
  starkKey: String!
  vaultId: Int!
  weiAmount: WeiAmount!
}
"An ETH migration"
type EthMigration implements Node {
  aasmState: String!
  id: ID!
  nonce: String!
  weiAmount: String!
}
"An Ethereum Account"
type EthereumAccount implements Node {
  address: String!
  id: ID!
  migratorApproved: Boolean
}
"An Ethereum Transaction"
type EthereumTransaction implements Node {
  confirmedAt: ISO8601DateTime!
  id: ID!
  status: TransactionStatus
  transactionHash: String!
}
"A ETH/EUR exchange rate"
type ExchangeRate implements Node {
  id: ID!
  rates: Json!
  time: ISO8601DateTime!
}
"A landmark as detected on a Player picture by face recognition"
type FaceLandmark {
  type: String!
  x: Float!
  xInPx: Float!
  y: Float!
  yInPx: Float!
}
"The starkware fast withdrawal as a ConditionalTransferRequest"
type FastWithdrawal implements Node {
  amount: String!
  condition: String!
  createdAt: ISO8601DateTime!
  expirationTimestamp: Int!
  id: ID!
  nonce: Int!
  receiverPublicKey: String!
  receiverVaultId: Int!
  salt: String!
  senderVaultId: Int!
  status: WithdrawalStatus!
  to: String!
  token: String!
  transactionHash: String
}
"The starkware fast withdrawal with rates as a ConditionalTransferRequest"
type FastWithdrawalWithRates implements Node {
  amount: String!
  amountInFiat: Fiat!
  condition: String!
  createdAt: ISO8601DateTime!
  expirationTimestamp: Int!
  id: ID!
  nonce: Int!
  receiverPublicKey: String!
  receiverVaultId: Int!
  salt: String!
  senderVaultId: Int!
  status: WithdrawalStatus!
  to: String!
  token: String!
  transactionHash: String
}
"Starkware fee representation"
type Fee {
  feeLimit: String!
  sourceVaultId: Int!
  tokenId: String!
}
type Fiat {
  eur: Float!
  gbp: Float!
  usd: Float!
}
"The starkware Full withdrawal"
type FullWithdrawalRequest implements Node {
  id: ID!
  served: Boolean!
  valid: Boolean!
}
"A professional football game"
type Game implements Node {
  away: Club @deprecated(reason: "Replaced by awayTeam")
  awayGoals: Int
  awayTeam: Team
  competition: Competition!
  date: ISO8601DateTime!
  extraTimeScoreAway: Int
  extraTimeScoreHome: Int
  home: Club @deprecated(reason: "Replaced by homeTeam")
  homeGoals: Int!
  homeTeam: Team
  id: ID!
  lowCoverage: Boolean!
  minute: Int!
  penaltyScoreAway: Int
  penaltyScoreHome: Int
  periodType: Period!
  scored: Boolean!
  so5Fixture: So5Fixture
  "Available statuses: scheduled | playing | played | cancelled | postponed | suspended."
  status: String!
}
"The connection type for Game."
type GameConnection {
  "A list of edges."
  edges: [GameEdge!]!
  "A list of nodes."
  nodes: [Game!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type GameEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Game
}
"Hero banner metadata for the home page"
type HeroBanner {
  background: String
  colorLeft: String
  colorRight: String
  href: String!
  hrefColor: String
  hrefLabel: String!
  id: String!
  pictureDesktopUrl: String
  secondaryHref: String
  secondaryHrefColor: String
  secondaryHrefLabel: String
  subtitle: String
  title: String!
  videoDesktopUrl: String
}
"Collection of hero banners for the home page"
type HeroBannersSet {
  heroBanners: [HeroBanner!]!
  id: String!
  title: String!
}
"A highlighted deck"
type HighlightedDeck implements DeckInterface & Node {
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CardConnection!
  cardsCount: Int!
  deckCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): DeckCardConnection!
  deckCardsCount: Int!
  firstCard: Card
  id: ID!
  slug: String!
  user: User
}
"A player injury"
type Injury implements Node {
  active: Boolean!
  expectedEndDate: ISO8601DateTime
  id: ID!
  kind: String
  startDate: ISO8601DateTime
}
"Represents a jwt token"
type JwtToken {
  "JWT token expiration time."
  expiredAt: ISO8601DateTime!
  "JWT token, usable through a `Authorization: Bearer <token>` HTTP header."
  token: String!
}
"A club on the landing page"
type LandingClub {
  league: String!
  logo: String!
  name: String!
}
"A landing theme"
type LandingTheme implements Node {
  cards: [String!]!
  id: ID!
  slug: String!
  sport: Sport
  subtitle: String
  userSource: UserSource
}
"A So5 Leaderboard rewards config"
type LeaderboardRewardsConfig {
  conditional: [So5RewardConfig!]
  prizePoolCurrency: PaymentCurrency
  ranking: [So5RewardConfig!]
}
"The limit order representation of one side of a Deal (Auction or Offer)"
type LimitOrder {
  amountBuy: String!
  amountSell: String!
  expirationTimestamp: Int!
  feeInfo: Fee
  id: String @deprecated(reason: "Will be removed soon")
  nonce: Int!
  tokenBuy: String!
  tokenSell: String!
  vaultIdBuy: Int!
  vaultIdSell: Int!
}
"A Loom Account"
type LoomAccount implements Node {
  address: String!
  id: ID!
}
"A set of cards being promoted in the market place"
type MarketplacePromotionalEvent {
  name: String!
  objectIds: [String!]!
}
"A set of events being promoted in the market place for a sport"
type MarketplacePromotionalEvents {
  events: [MarketplacePromotionalEvent!]!
  sport: Sport!
}
"Enforces restrictions on the number of card that own the user of submitted lineups"
type MaximumCardsCountOwnedByUser {
  maximumCards: Int!
  scarcity: String
}
"An object representing a club for which a player has played during a certain time."
type Membership implements Node {
  aggregatedStats: Stats!
  club: Club
  endDate: ISO8601DateTime
  id: ID!
  membershipTeam: Team!
  player: Player!
  startDate: ISO8601DateTime!
  stats: [Stats!]!
  team: Club @deprecated(reason: "Replaced by membershipTeam")
}
"The connection type for Membership."
type MembershipConnection {
  "A list of edges."
  edges: [MembershipEdge!]!
  "A list of nodes."
  nodes: [Membership!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type MembershipEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Membership
}
"Represents a quota of Cards that can be minted on demand by a User"
type MintingQuota implements Node {
  allocated(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): MintingQuotaAllocationConnection!
  endDate: ISO8601DateTime!
  id: ID!
  playerPool: PlayerPool
  startDate: ISO8601DateTime!
  units: [MintingQuotaUnit!]!
  user: User!
}
"Represents a quota of Cards of a certain tiers and rarity that can be minted on demand by a User"
type MintingQuotaAllocation implements Node {
  card: Card!
  id: ID!
  tier: Int!
  user: User!
}
"The connection type for MintingQuotaAllocation."
type MintingQuotaAllocationConnection {
  "A list of edges."
  edges: [MintingQuotaAllocationEdge!]!
  "A list of nodes."
  nodes: [MintingQuotaAllocation!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type MintingQuotaAllocationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: MintingQuotaAllocation
}
"Represents a quota of Cards of a certain tier and rarity that can be minted on demand by a User"
type MintingQuotaUnit implements Node {
  allocations(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): MintingQuotaAllocationConnection!
  id: ID!
  mintingQuota: MintingQuota!
  quantity: Int!
  rarity: Rarity!
  remaining: Int!
  tier: CardQuality
}
type Mutation {
  "Accept an offer"
  acceptOffer(
    "Parameters for acceptOffer"
    input: acceptOfferInput!
  ): acceptOfferPayload
  "Accept terms of service"
  acceptTerms(
    "Parameters for acceptTerms"
    input: acceptTermsInput!
  ): acceptTermsPayload
  "Allows a user to add cards to a Deck."
  addCardsToDeck(
    "Parameters for addCardsToDeck"
    input: addCardsToDeckInput!
  ): addCardsToDeckPayload
  "Allows a user to subscribe to the waiting list"
  addEmailToList(
    "Parameters for addEmailToList"
    input: addEmailToListInput!
  ): addEmailToListPayload
  "Add favourite clubs during the onboarding process"
  addFavouriteClubs(
    "Parameters for addFavouriteClubs"
    input: addFavouriteClubsInput!
  ): addFavouriteClubsPayload
  "Approve Migrator contract"
  approveMigrator(
    "Parameters for approveMigrator"
    input: approveMigratorInput!
  ): approveMigratorPayload
  "Bid on an auction"
  bid(
    "Parameters for bid"
    input: bidInput!
  ): bidPayload
  "Block another user from sending offers"
  blockUserOffers(
    "Parameters for blockUserOffers"
    input: blockUserOffersInput!
  ): blockUserOffersPayload
  "Buy a skin for your club"
  buySkin(
    "Parameters for buySkin"
    input: buySkinInput!
  ): buySkinPayload
  cancelEthBankWithdrawals(
    "Parameters for cancelEthBankWithdrawals"
    input: cancelEthBankWithdrawalsInput!
  ): cancelEthBankWithdrawalsPayload
  cancelFastWithdrawal(
    "Parameters for cancelFastWithdrawal"
    input: cancelFastWithdrawalInput!
  ): cancelFastWithdrawalPayload
  "Cancel an offer"
  cancelOffer(
    "Parameters for cancelOffer"
    input: cancelOfferInput!
  ): cancelOfferPayload
  cancelWithdrawal(
    "Parameters for cancelWithdrawal"
    input: cancelWithdrawalInput!
  ): cancelWithdrawalPayload
  "Check phone number verification code"
  checkPhoneNumberVerificationCode(
    "Parameters for checkPhoneNumberVerificationCode"
    input: checkPhoneNumberVerificationCodeInput!
  ): checkPhoneNumberVerificationCodePayload
  "Claim an award"
  claimAward(
    "Parameters for claimAward"
    input: claimAwardInput!
  ): claimAwardPayload
  "Allows a user to claim a card drop"
  claimCardDrop(
    "Parameters for claimCardDrop"
    input: claimCardDropInput!
  ): claimCardDropPayload
  "Claim a referral reward"
  claimReferralReward(
    "Parameters for claimReferralReward"
    input: claimReferralRewardInput!
  ): claimReferralRewardPayload
  "Claim a reward"
  claimReward(
    "Parameters for claimReward"
    input: claimRewardInput!
  ): claimRewardPayload
  "Allows a user to mark an onboarding task as complete"
  completeOnboardingTask(
    "Parameters for completeOnboardingTask"
    input: completeOnboardingTaskInput!
  ): completeOnboardingTaskPayload
  "Confirm Email address"
  confirmEmail(
    "Parameters for confirmEmail"
    input: confirmEmailInput!
  ): confirmEmailPayload
  "Confirms user Lineups"
  confirmSo5Lineups(
    "Parameters for confirmSo5Lineups"
    input: confirmSo5LineupsInput!
  ): confirmSo5LineupsPayload
  "Withdraw a card to Ethereum"
  createCardWithdrawal(
    "Parameters for createCardWithdrawal"
    input: createCardWithdrawalInput!
  ): createCardWithdrawalPayload
  "Allows a user to create a custom deck."
  createCustomDeck(
    "Parameters for createCustomDeck"
    input: createCustomDeckInput!
  ): createCustomDeckPayload
  "Send a Direct Offer to another manager"
  createDirectOffer(
    "Parameters for createDirectOffer"
    input: createDirectOfferInput!
  ): createDirectOfferPayload
  "Create a user draft and Lineup"
  createDraftAndSo5Lineup(
    "Parameters for createDraftAndSo5Lineup"
    input: createDraftAndSo5LineupInput!
  ): createDraftAndSo5LineupPayload
  createEthBankWithdrawalIntent(
    "Parameters for createEthBankWithdrawalIntent"
    input: createEthBankWithdrawalIntentInput!
  ): createEthBankWithdrawalIntentPayload
  "Creates an ETH migration"
  createEthMigration(
    "Parameters for createEthMigration"
    input: createEthMigrationInput!
  ): createEthMigrationPayload
  "Creates an eth vault"
  createEthVault(
    "Parameters for createEthVault"
    input: createEthVaultInput!
  ): createEthVaultPayload
  createFastWithdrawal(
    "Parameters for createFastWithdrawal"
    input: createFastWithdrawalInput!
  ): createFastWithdrawalPayload
  "Fix a minimum price for a card or token"
  createOrUpdateSingleBuyOfferMinPrice(
    "Parameters for createOrUpdateSingleBuyOfferMinPrice"
    input: createOrUpdateSingleBuyOfferMinPriceInput!
  ): createOrUpdateSingleBuyOfferMinPricePayload
  "Create or update a user Lineup"
  createOrUpdateSo5Lineup(
    "Parameters for createOrUpdateSo5Lineup"
    input: createOrUpdateSo5LineupInput!
  ): createOrUpdateSo5LineupPayload
  "Create a payment intent"
  createPaymentIntent(
    "Parameters for createPaymentIntent"
    input: createPaymentIntentInput!
  ): createPaymentIntentPayload
  "Offer to buy a single card for a fixed price"
  createSingleBuyOffer(
    "Parameters for createSingleBuyOffer"
    input: createSingleBuyOfferInput!
  ): createSingleBuyOfferPayload
  "Sell a single card for a fixed price"
  createSingleSaleOffer(
    "Parameters for createSingleSaleOffer"
    input: createSingleSaleOfferInput!
  ): createSingleSaleOfferPayload
  "Create a User Group"
  createSo5UserGroup(
    "Parameters for createSo5UserGroup"
    input: createSo5UserGroupInput!
  ): createSo5UserGroupPayload
  "Subscribe to new auctions on a Card, a Player, a Club or a Country"
  createSubscription(
    "Parameters for createSubscription"
    input: createSubscriptionInput!
  ): createSubscriptionPayload
  createWithdrawal(
    "Parameters for createWithdrawal"
    input: createWithdrawalInput!
  ): createWithdrawalPayload
  "Allows a user to delete a custom deck."
  deleteCustomDeck(
    "Parameters for deleteCustomDeck"
    input: deleteCustomDeckInput!
  ): deleteCustomDeckPayload
  "Deletes a user Lineup"
  deleteSo5Lineup(
    "Parameters for deleteSo5Lineup"
    input: deleteSo5LineupInput!
  ): deleteSo5LineupPayload
  "Delete a User Group"
  deleteSo5UserGroup(
    "Parameters for deleteSo5UserGroup"
    input: deleteSo5UserGroupInput!
  ): deleteSo5UserGroupPayload
  "Delete a subscription to new auctions on a Card, a Player, a Club or a Country"
  deleteSubscription(
    "Parameters for deleteSubscription"
    input: deleteSubscriptionInput!
  ): deleteSubscriptionPayload
  "Deletes user Lineups by leagues"
  deleteUserSo5Lineups(
    "Parameters for deleteUserSo5Lineups"
    input: deleteUserSo5LineupsInput!
  ): deleteUserSo5LineupsPayload
  "Destroy my Sorare account"
  destroyAccount(
    "Parameters for destroyAccount"
    input: destroyAccountInput!
  ): destroyAccountPayload
  "Destroy an expired referral"
  destroyReferral(
    "Parameters for destroyReferral"
    input: destroyReferralInput!
  ): destroyReferralPayload
  detachPaymentMethod(
    "Parameters for detachPaymentMethod"
    input: detachPaymentMethodInput!
  ): detachPaymentMethodPayload
  "Disable 2FA requirement for login"
  disable2Fa(
    "Parameters for disable2fa"
    input: disable2faInput!
  ): disable2faPayload
  "Disconnect from a social auth"
  disconnectOmniauthProvider(
    "Parameters for disconnectOmniauthProvider"
    input: disconnectOmniauthProviderInput!
  ): disconnectOmniauthProviderPayload
  "Allows a user to edit a card position in a Deck."
  editCardInDeck(
    "Parameters for editCardInDeck"
    input: editCardInDeckInput!
  ): editCardInDeckPayload
  "Allows a user to edit a custom deck."
  editCustomDeck(
    "Parameters for editCustomDeck"
    input: editCustomDeckInput!
  ): editCustomDeckPayload
  "Enable 2FA requirement for login"
  enable2Fa(
    "Parameters for enable2fa"
    input: enable2faInput!
  ): enable2faPayload
  "Generate the pickable players of an action reward"
  generateActionRewardPickablePlayers(
    "Parameters for generateActionRewardPickablePlayers"
    input: generateActionRewardPickablePlayersInput!
  ): generateActionRewardPickablePlayersPayload
  "Generate OTP backup codes"
  generateOtpBackupCodes(
    "Parameters for generateOtpBackupCodes"
    input: generateOtpBackupCodesInput!
  ): generateOtpBackupCodesPayload
  "Join a User Group"
  joinSo5UserGroup(
    "Parameters for joinSo5UserGroup"
    input: joinSo5UserGroupInput!
  ): joinSo5UserGroupPayload
  "Mark notifications as read"
  markNotificationsAsRead(
    "Parameters for markNotificationsAsRead"
    input: markNotificationsAsReadInput!
  ): markNotificationsAsReadPayload
  "Mint Cards for other users"
  mintCardsForUsers(
    "Parameters for mintCardsForUsers"
    input: mintCardsForUsersInput!
  ): mintCardsForUsersPayload
  "Pick the players of an action reward"
  pickActionRewardPlayers(
    "Parameters for pickActionRewardPlayers"
    input: pickActionRewardPlayersInput!
  ): pickActionRewardPlayersPayload
  "Get the limit orders that need to be signed in order to accept an offer"
  prepareAcceptOffer(
    "Parameters for prepareAcceptOffer"
    input: prepareAcceptOfferInput!
  ): prepareAcceptOfferPayload
  "Get the limit orders that need to be signed in order to bid on an english auction"
  prepareBid(
    "Parameters for prepareBid"
    input: prepareBidInput!
  ): prepareBidPayload
  "Get transfer request that needs to be signed in order to withdraw a card"
  prepareCardWithdrawal(
    "Parameters for prepareCardWithdrawal"
    input: prepareCardWithdrawalInput!
  ): prepareCardWithdrawalPayload
  "Get the payload to make an ETH deposit"
  prepareEthDeposit(
    "Parameters for prepareEthDeposit"
    input: prepareEthDepositInput!
  ): prepareEthDepositPayload
  "Get the limit orders that need to be signed in order to be able to create an offer"
  prepareOffer(
    "Parameters for prepareOffer"
    input: prepareOfferInput!
  ): prepareOfferPayload
  "Get the payload to deposit an NFT into Layer 2"
  prepareTokenDeposit(
    "Parameters for prepareTokenDeposit"
    input: prepareTokenDepositInput!
  ): prepareTokenDepositPayload
  "Reject an Offer"
  rejectOffer(
    "Parameters for rejectOffer"
    input: rejectOfferInput!
  ): rejectOfferPayload
  relayCall(
    "Parameters for relayCall"
    input: relayCallInput!
  ): relayCallPayload
  "Allows a user to remove a card from a deck."
  removeCardFromDeck(
    "Parameters for removeCardFromDeck"
    input: removeCardFromDeckInput!
  ): removeCardFromDeckPayload
  "Remove a User from a User Group"
  removeUserFromSo5UserGroup(
    "Parameters for removeUserFromSo5UserGroup"
    input: removeUserFromSo5UserGroupInput!
  ): removeUserFromSo5UserGroupPayload
  "Request a receipt from Stripe"
  requestPaymentReceipt(
    "Parameters for requestReceipt"
    input: requestReceiptInput!
  ): requestReceiptPayload
  resendConfirmationInstructions(
    "Parameters for resendConfirmationInstructions"
    input: resendConfirmationInstructionsInput!
  ): resendConfirmationInstructionsPayload
  resetPrivateKey(
    "Parameters for resetPrivateKey"
    input: resetPrivateKeyInput!
  ): resetPrivateKeyPayload
  "Allows a user to restart a skipped onboarding process"
  resumeOnboarding(
    "Parameters for resumeOnboarding"
    input: resumeOnboardingInput!
  ): resumeOnboardingPayload
  "Add or update the given device token for push notifications"
  setDeviceToken(
    "Parameters for setDeviceToken"
    input: setDeviceTokenInput!
  ): setDeviceTokenPayload
  "Sign in"
  signIn(
    "Parameters for signIn"
    input: signInInput!
  ): signInPayload
  "Sign in with OAuth"
  signInWithOauth(
    "Parameters for signInWithOAuth"
    input: signInWithOAuthInput!
  ): signInWithOAuthPayload
  "Sign out from all sessions except the current one"
  signOutFromAllDevices(
    "Parameters for signOutFromAllDevices"
    input: signOutFromAllDevicesInput!
  ): signOutFromAllDevicesPayload
  "Sign up"
  signUp(
    "Parameters for signUp"
    input: signUpInput!
  ): signUpPayload
  "Allows a user to skip his onboarding process"
  skipOnboarding(
    "Parameters for skipOnboarding"
    input: skipOnboardingInput!
  ): skipOnboardingPayload
  "Unblock email"
  unblockEmail(
    "Parameters for UnblockEmail"
    input: UnblockEmailInput!
  ): UnblockEmailPayload
  "Unblock another user from sending offers"
  unblockUserOffers(
    "Parameters for unblockUserOffers"
    input: unblockUserOffersInput!
  ): unblockUserOffersPayload
  "Update the highlightedCard in a collection"
  updateHighlightedCard(
    "Parameters for updateHighlightedCard"
    input: updateHighlightedCardInput!
  ): updateHighlightedCardPayload
  "Update a User Group"
  updateSo5UserGroup(
    "Parameters for updateSo5UserGroup"
    input: updateSo5UserGroupInput!
  ): updateSo5UserGroupPayload
  "Update a subscription notification preferences"
  updateSubscription(
    "Parameters for updateSubscription"
    input: updateSubscriptionInput!
  ): updateSubscriptionPayload
  "Update user profile"
  updateUserProfile(
    "Parameters for updateUserProfile"
    input: updateUserProfileInput!
  ): updateUserProfilePayload
  "Update user settings"
  updateUserSettings(
    "Parameters for updateUserSettings"
    input: updateUserSettingsInput!
  ): updateUserSettingsPayload
  "Creates a common draft"
  upsertCommonDraft(
    "Parameters for upsertCommonDraft"
    input: upsertCommonDraftInput!
  ): upsertCommonDraftPayload
  "Verify phone number"
  verifyPhoneNumber(
    "Parameters for verifyPhoneNumber"
    input: verifyPhoneNumberInput!
  ): verifyPhoneNumberPayload
}
type NationalTeam implements Node & TeamInterface & WithPictureInterface & WithSubscriptionsInterface {
  activeCompetitions: [Competition!]!
  "The `active_memberships` field cannot be nested within a list."
  activeMemberships(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): MembershipConnection!
  "The `active_players` field cannot be nested within a list."
  activePlayers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  code: String
  colorBottom: String @deprecated(reason: "replaced by colorRight on customBanner")
  colorTop: String @deprecated(reason: "replaced by colorLeft on customBanner")
  country: Country!
  currentUserSubscription: EmailSubscription
  customBanner: CustomBanner
  founded: String
  "The `games` field cannot be nested within a list."
  games(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Start time (inclusive) of the game."
    startDate: ISO8601DateTime!,
    "End time (inclusive) of the game."
    endDate: ISO8601DateTime!
  ): GameConnection!
  id: ID!
  internationalCompetition: Competition
  lastFiveGames: [Game!]!
  "The `latest_games` field cannot be nested within a list."
  latestGames(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): GameConnection!
  license: License! @deprecated(reason: "only exposed on cards")
  name: String!
  optaId: String
  pictureSecondaryUrl: String
  pictureUrl(derivative: String): String
  pictureUrlByRarity(derivative: String): Json! @deprecated(reason: "Replaced teamPictureUrl on CardType")
  "The `players` field cannot be nested within a list."
  players(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  ready: Boolean!
  "The `recent_departures` field cannot be nested within a list."
  recentDepartures(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  slug: String!
  subscriptionsCount: Int!
  upcomingGames(first: Int!): [Game]!
}
"The connection type for Notification."
type NotificationConnection {
  "A list of edges."
  edges: [NotificationEdge]
  "A list of nodes."
  nodes: [Notification]
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type NotificationEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Notification
}
"A Sorare user notification preference"
type NotificationPreference implements Node {
  defaultValue: Json!
  id: ID!
  name: String!
  value: Json
  values: [Json!]!
}
"The entrypoint for notifications information"
type Notifications implements Node {
  id: ID!
  notifications(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): NotificationConnection!
  unreadCount: Int!
}
"An OAuth application"
type OAuthApplication implements WithPictureInterface {
  name: String!
  pictureUrl(derivative: String): String
  scopes: String
}
"An Offer"
type Offer implements Node & OfferInterface {
  aasmState: String!
  acceptedAt: ISO8601DateTime
  blockchainId: String
  cancelledAt: ISO8601DateTime
  counteredOffer: Offer
  createdAt: ISO8601DateTime!
  creditCardFee: Float!
  endDate: ISO8601DateTime!
  id: ID!
  marketFeeWeiAmount: WeiAmount!
  receiveCardOffers: [CardOffer!]! @deprecated(reason: "use receiveCards instead")
  receiveCards: [Card!]!
  receiveWeiAmount: String
  "Receive Amount in fiat currencies. Not broadcastable for performance reasons."
  receiveWeiAmountInFiat: Fiat
  receiver: Ownerable
  sendCardOffers: [CardOffer!]! @deprecated(reason: "use sendCards instead")
  sendCards: [Card!]!
  sendWeiAmount: String
  "Send Amount in fiat currencies. Not broadcastable for performance reasons."
  sendWeiAmountInFiat: Fiat
  sender: Ownerable!
  startDate: ISO8601DateTime!
  tokenOffer: TokenOffer!
}
"The connection type for Offer."
type OfferConnection {
  "A list of edges."
  edges: [OfferEdge!]!
  "A list of nodes."
  nodes: [Offer!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type OfferEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Offer
}
"A user notification regarding an Offer"
type OfferNotification implements Node & NotificationInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  offer: Offer!
  read: Boolean!
  sport: Sport
  tokenOffer: TokenOffer!
  user: CurrentUser!
}
"An object representing the state of a user onboarding"
type Onboarding {
  completed: Boolean!
  enabled: Boolean!
  id: ID!
  skipped: Boolean!
  specialEventCompleted: Boolean!
  specialEventStarted: Boolean!
  tasks: [OnboardingTask!]!
}
"An object representing the state of a task in the user onboarding"
type OnboardingTask {
  drop: [CardDrop!]
  forced: Boolean!
  id: ID!
  name: OnboardingTaskEnum!
  state: OnboardingTaskState!
  steps: [OnboardingStepEnum!]!
}
"A list of best So5Score by position"
type OrderedSo5Scores {
  position: String!
  so5Scores: [So5Score!]!
}
"An object representing the past or present ownership of a card by a user or a contract"
type Owner implements Node & OwnerInterface {
  account: Account
  address: String!
  blockchain: String!
  card: Card!
  "The deal id that created this owner in case it comes from an offer"
  dealId: String @deprecated(reason: "no longer maintained")
  from: ISO8601DateTime!
  id: ID!
  migratorApproval: Boolean! @deprecated(reason: "use account.accountable.migratorApproved")
  newId: String @deprecated(reason: "use id")
  optimistic: Boolean!
  ownerable: Ownerable @deprecated(reason: "use account.owner instead")
  "Card price, in wei."
  price: String!
  referenceId: String
  transferType: String!
  userNonce: Int @deprecated(reason: "no longer maintained")
}
"An owner with conversion rates"
type OwnerWithRates implements Node & OwnerInterface {
  account: Account
  address: String!
  blockchain: String!
  card: Card!
  "The deal id that created this owner in case it comes from an offer"
  dealId: String @deprecated(reason: "no longer maintained")
  from: ISO8601DateTime!
  id: ID!
  migratorApproval: Boolean! @deprecated(reason: "use account.accountable.migratorApproved")
  newId: String @deprecated(reason: "use id")
  optimistic: Boolean!
  ownerable: Ownerable @deprecated(reason: "use account.owner instead")
  "Card price, in wei."
  price: String!
  priceInFiat: Fiat!
  referenceId: String
  transferType: String!
  userNonce: Int @deprecated(reason: "no longer maintained")
}
"A pack of cards"
type Pack implements Node {
  blockchainId: String!
  blockedByUser: Boolean!
  boughtByUser: Boolean!
  cards: [Card!]!
  category: String!
  contract: Contract!
  cutOff: ISO8601DateTime!
  deadline: ISO8601DateTime!
  id: ID!
  priceInEuroCents: String!
  priceInWei: String!
  serial: Int!
  slug: String!
  sold: Boolean!
}
"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}
"A payment intent"
type Payment implements Node {
  aasmState: PaymentIntentState!
  amount: String!
  amountInFiat: Fiat! @deprecated(reason: "Use fiatAmount instead")
  creditCardReceiptAvailable: Boolean!
  creditCardReceiptSent: Boolean!
  fiat: Boolean!
  fiatAmount: Int
  fiatCurrency: FiatCurrency
  fiatReceiptUrl: String
  id: ID!
  operation: PaymentIntentOperation
  spentAt: ISO8601DateTime!
  tokenOperation: PaymentIntentTokenOperation
  user: User!
}
"The connection type for Payment."
type PaymentConnection {
  "A list of edges."
  edges: [PaymentEdge!]!
  "A list of nodes."
  nodes: [Payment!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type PaymentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Payment
}
"A Stripe Payment Intent"
type PaymentIntent {
  amount: Int!
  clientSecret: String!
  id: String!
  paymentMethod: String
}
"Stripe Payment Method"
type PaymentMethod {
  card: CreditCard!
  id: String!
}
"A pending deposit to user's wallet"
type PendingDeposit {
  amount: String!
  amountInFiat: Fiat!
  date: ISO8601DateTime!
  providerType: DepositProvider!
}
"A pickable player"
type PickablePlayer implements Node {
  id: ID!
  pictureUrl: String!
  player: Player!
}
"A professional football player"
type Player implements Node & WithMemberships & WithPictureInterface & WithPublicCardsInterface & WithSubscriptionsInterface {
  activeClub: Club
  activeClubMembership: Membership
  activeInjuries: [Injury!]!
  activeNationalTeam: NationalTeam
  age: Int!
  "All player So5Scores ordered by descending game date"
  allSo5Scores(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): So5ScoreConnection!
  appearances: Int!
  beforeLastOwningMembership: Membership
  bestFoot: String
  birthDate: ISO8601DateTime
  cardSupply: [CardSeasonSupply!]!
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  careerSeasons(
    "If defined only return seasons for competitions of that type"
    type: CompetitionType = null
  ): [Season!]!
  clubMemberships: [Membership!]!
  country: Country!
  currentSeason: Season
  currentUserSubscription: EmailSubscription
  displayName: String!
  firstName: String!
  gameForLeaderboard(so5LeaderboardSlug: String!): Game
  gameStats(last: Int!, lowCoverage: Boolean = false): [PlayerGameStats]!
  height: Int
  id: ID!
  lastClub: Club
  lastName: String!
  matchName: String!
  memberships: [Membership!]!
  optaId: String
  pictureUrl(derivative: String): String
  position: String!
  "Returns the 3 most followed players in the player's club The `related_players` field cannot be nested within a list."
  relatedPlayers: [Player!]!
  shirtNumber: Int
  slug: String!
  "Up to 5 last So5Scores used in a So5Fixture"
  so5Scores(last: Int!, lowCoverage: Boolean = false): [So5Score]!
  stats(seasonStartYear: Int!): Stats
  status: PlayerStatus!
  subscriptionsCount: Int!
  tmktImageUrl: String @deprecated(reason: """Replaced by pictureUrl(derivative: \"avatar\")""")
  user: User
  weight: Int
}
"The connection type for Player."
type PlayerConnection {
  "A list of edges."
  edges: [PlayerEdge!]!
  "A list of nodes."
  nodes: [Player!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type PlayerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Player
}
"Stats of a player for a game"
type PlayerGameStats implements Node {
  accuratePass: Int
  cleanSheet: Int
  club: Club! @deprecated(reason: "Replaced by team")
  crossAccuracy: Int
  formationPlace: Int
  fouls: Int
  game: Game!
  gameStarted: Int
  gameStatus: String! @deprecated(reason: "Replaced by status on game field")
  goalAssist: Int
  goalKicks: Int
  goals: Int
  goalsConceded: Int
  id: ID!
  live: Boolean!
  lostCorners: Int
  minsPlayed: Int
  onGameSheet: Boolean!
  ontargetScoringAtt: Int
  ownGoals: Int
  parries: Int
  passAccuracy: Int
  penaltiesSaved: Int
  penaltyKickMissed: Int
  penaltySave: Int
  player: Player!
  redCard: Int
  relevantStats: Json! @deprecated(reason: "Not relevant with scoring V4")
  reviewed: Boolean!
  saves: Int
  shotAccuracy: Int
  shotEfficiency: Int
  singleGoalGame: Int
  so5Score(
    "Position of the so5Score"
    position: String
  ): So5Score
  team: Team!
  totalClearance: Int
  totalPass: Int
  totalScoringAtt: Int
  totalTackle: Int
  wasFouled: Int
  yellowCard: Int
}
"Represents a list of players available for a minting quota"
type PlayerPool {
  common: TieredPlayerPool
  computedAt: ISO8601DateTime!
  customSeries: TieredPlayerPool
  limited: TieredPlayerPool
  rare: TieredPlayerPool
  superRare: TieredPlayerPool
  unique: TieredPlayerPool
}
"Player status based on latest games he has played"
type PlayerStatus implements Node {
  id: ID!
  lastFifteenSo5Appearances: Int
  lastFifteenSo5AverageScore: Float
  lastFiveSo5Appearances: Int
  lastFiveSo5AverageScore: Float
  playingStatus: String
}
"A professional football player with current season supply"
type PlayerWithSupply {
  availableSupply: Int
  player: Player!
  slug: String!
}
"An object representing the breakdown of the power of a Card"
type PowerBreakdown {
  captain: String!
  fidelity: String!
  scarcity: String!
  season: String!
  version: Int!
  xp: String!
}
type Query {
  "Get a list of all cards"
  allCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  "Get latest announcements"
  announcements(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): AnnouncementConnection!
  "Get a bundled auction"
  bundledAuction(slug: String!): BundledAuction!
  "Fetch bundled auctions"
  bundledAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): BundledAuctionConnection! @deprecated(reason: "Use transferMarket type instead")
  "Get a card"
  card(slug: String!): Card!
  "Get a card with its asset ID"
  cardByAssetId(assetId: String!): Card!
  "Get a card with its blockchain ID"
  cardByBlockchainId(blockchainId: String!): Card!
  "Get a card edition"
  cardEdition(name: String!): CardEdition! @deprecated(reason: "legacy concept")
  "Get a card sample picture quacking like a card"
  cardSamplePicture(id: String!): Card!
  "Get a list of cards"
  cards(age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): [Card!]!
  "Get a club"
  club(slug: String!): Club!
  "Get a list of clubs"
  clubs(slugs: [String!]!): [Club!]!
  "Get the list of clubs that are released and minted"
  clubsReady: [Club!]!
  "Get a Competition"
  competition(slug: String!): Competition!
  "Get config"
  config: Config!
  "Get a list of countries"
  countries(slugs: [String!]!): [Country!]!
  "Get a country"
  country(slug: String!): Country!
  "Get the current block height of Ethereum blockchain"
  currentBlockHeight: Int!
  "Fetch the current So5 Fixture"
  currentSo5Fixture: So5Fixture! @deprecated(reason: "Use default value of so5Fixture")
  "Fetch the current user."
  currentUser: CurrentUser
  "Get a CustomDeck"
  customDeck(slug: String!): CustomDeck!
  "Get a DeckInFormation"
  deckInFormation(slug: String!): DeckInFormation!
  "Get an english auction"
  englishAuction(slug: String!): BundledAuction!
  "Get a list of cards owned by an ethereum account"
  ethereumCards(address: String!): [Card!]!
  "Get a list of tokens owned by an ethereum account"
  ethereumTokens(address: String!): [Token!]!
  featuredSo5Fixtures(first: Int): [So5Fixture!]! @deprecated(reason: "Moved into so5")
  "Get a Game"
  game(id: ID!): Game!
  leaguesOpenForGameStats: [Competition!]!
  "Get a national team"
  nationalTeam(slug: String!): NationalTeam!
  "Get a list of national teams"
  nationalTeams(slugs: [String!]!): [NationalTeam!]!
  "Get the next batch nonce for a given address"
  nextRelayBatchNonce(address: String!): Int!
  "Fetches an object given its ID."
  node(
    "ID of the object."
    id: ID!
  ): Node
  "Fetches a list of objects given a list of IDs."
  nodes(
    "IDs of the objects."
    ids: [ID!]!
  ): [Node]!
  "Get an OAuth application from the client id"
  oauthApplication(clientId: String!): OAuthApplication!
  "Get a pack"
  pack(id: String!): Pack! @deprecated(reason: "We do not sell packs anymore")
  "Get packs on sale"
  packs(size: Int): [Pack!]! @deprecated(reason: "We do not sell packs anymore")
  "Get a player"
  player(slug: String!): Player!
  "Get a list of players"
  players(slugs: [String!]!): [Player!]!
  "Get a potential referrer for a given name"
  referrer(name: String!): String
  "Get information needed to screenshot a card"
  screenshottableCard(id: ID!, serialNumber: Int): ScreenshottableCard!
  "Get a season"
  season(startYear: Int!): Season!
  "Fetch single sale offers"
  singleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): SingleSaleOfferConnection! @deprecated(reason: "Use transferMarket type instead")
  "Get paginated available skins"
  skins(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,position: SkinPosition, unlockedOnly: Boolean  ): SkinConnection!
  so5: So5Root!
  "Get an So5Appearance"
  so5Appearance(id: ID!): So5Appearance!
  so5Fixture(id: ID, slug: String, type: So5State): So5Fixture @deprecated(reason: "Moved into so5")
  so5Fixtures(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): So5FixtureConnection! @deprecated(reason: "Moved into so5")
  "Get a So5Leaderboard"
  so5Leaderboard(slug: String!): So5Leaderboard!
  "Get a So5League"
  so5League(slug: String!): So5League!
  "Get a So5Lineup"
  so5Lineup(id: ID!): So5Lineup!
  "Get a So5Ranking"
  so5Ranking(id: ID!): So5Ranking!
  "Get paginated rankings for a leaderboard"
  so5Rankings(so5LeaderboardSlug: String!, page: Int!, pageSize: Int): So5RankingsPaginated! @deprecated(reason: "use so5Leaderboard query")
  "Get a So5Reward"
  so5Reward(slug: String!): So5Reward!
  "Get a So5Score"
  so5Score(id: ID!): So5Score!
  "Get a Starkware account."
  starkwareAccount(starkKey: String!): StarkwareAccount!
  "Get subscription statistics for a subscribable, like a Player or a Card"
  subscriptionStats(subscribable: SubscribableInput!): SubscriptionStats!
  tokens: TokenRoot!
  transferMarket: TransferMarket!
  "Get a user."
  user(slug: String!): User!
  "Get a user by ID."
  userById(id: String!): User!
  "Get a list of users."
  users(slugs: [String!]!): [User!]!
}
type Range {
  "Max price, in wei."
  max: String!
  "Min price, in wei."
  min: String!
}
type RaritiesCardLayout {
  common: CardLayout
  customSeries: CardLayout
  limited: CardLayout
  rare: CardLayout
  superRare: CardLayout
  unique: CardLayout
}
"A referral"
type Referral implements Node {
  aasmState: String!
  expirationDate: ISO8601DateTime!
  id: ID!
  referee: User!
  refereeCardsBoughtAtAuctionCount: Int!
  refereeConfirmedAt: ISO8601DateTime
  refereeIdentification: String
  refereeInvitationSentAt: ISO8601DateTime
  refereeSportCardsBoughtAtAuctionCount(sport: Sport!): Int!
  referrer: Referrer!
  referrerReward: ReferralReward
  sport: Sport
}
"A Referral campaign"
type ReferralCampaign implements Node {
  cardsCount: Int
  competitions: [Competition!]!
  endDate: ISO8601DateTime!
  id: ID!
  playerPoolUrl: String
  playingStatuses: [String!]
  startDate: ISO8601DateTime!
  teams: [Team!]!
  tiers: [CardQuality!]
}
type ReferralPaginated {
  currentPage: Int!
  id: String!
  pages: Int!
  referrals: [Referral!]!
  totalCount: Int!
}
"A referral reward"
type ReferralReward implements Node {
  card: Card
  id: ID!
  shippingState: ShippingState!
  token: Token!
}
"A user notification regarding a referral reward"
type ReferralRewardNotification implements Node & NotificationInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  read: Boolean!
  referralReward: ReferralReward!
  sport: Sport
  user: CurrentUser!
}
"ResponsiveBanner metadata"
type ResponsiveBanner {
  backgroundImageUrl: String!
  dark: Boolean
  description: String!
  id: String!
  mobileBackgroundImageUrl: String!
  primaryButton: String!
  primaryButtonLabel: String!
  secondaryButton: String
  secondaryButtonLabel: String
  title: String!
}
"A collection of responsive banners"
type ResponsiveBannersSet {
  id: String!
  responsiveBanners: [ResponsiveBanner!]!
  title: String!
}
"A rewarded card"
type RewardCard implements Node {
  card: Card!
  id: ID!
  pictureUrl: String
  quality: String
  so5Reward: So5Reward
  upgradedQuality: String
}
"Aggregated rewards overview"
type RewardsOverview {
  cards: Json!
  experiences: Json
  prizePool: Float!
  prizePoolCurrency: PaymentCurrency!
}
"A user notification regarding a Sale"
type SaleNotification implements Node & NotificationInterface {
  buyer: User
  card: Card
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  priceInWei: String!
  read: Boolean!
  seller: User!
  sport: Sport
  token: Token!
  user: CurrentUser!
}
"Information needed for a card screenshot"
type ScreenshottableCard {
  age: Int!
  baseballPositions: [BaseballPosition!]
  birthPlaceCountry: String!
  cardEditionName: String!
  cropped: Boolean!
  footballPosition: FootballPosition
  layout: CardLayout!
  nbaPositions: [NBAPosition!]
  playerDisplayName: String!
  playerPicture: SeasonPicture!
  position: String
  rarity: Rarity!
  rookie: Boolean!
  season: Int!
  serialNumber: Int!
  shirtNumber: Int!
  singleCivilYear: Boolean!
  sport: Sport!
  teamPictureUrl: String!
  teamShortName: String!
}
"A football season"
type Season implements Node & WithPublicCardsInterface {
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  id: ID!
  name: String!
  startYear: Int!
}
"A player season picture"
type SeasonPicture implements Node & WithPictureInterface {
  backgroundUrl: String
  chinY: Float
  chinYTarget: Int
  club: Club @deprecated(reason: "Replaced by team")
  eyeLeft: FaceLandmark!
  eyeRight: FaceLandmark!
  height: Int!
  id: ID!
  kit: String
  nose: FaceLandmark!
  offsetX: Int!
  offsetY: Int!
  pictureUrl(derivative: String): String
  player: Player!
  positioning: PicturePositioning!
  team: Team!
  width: Int!
}
"A Single Buy Offer Min Price"
type SingleBuyOfferMinPrice implements Node {
  amount: String!
  card: Card!
  id: ID!
  isPrivate: Boolean!
  user: User!
}
"An Single Sale Offer on a Card"
type SingleSaleOffer implements Node & OfferInterface {
  aasmState: String!
  acceptedAt: ISO8601DateTime
  acceptor: User
  blockchainId: String
  cancelledAt: ISO8601DateTime
  card: Card
  createdAt: ISO8601DateTime!
  creditCardFee: Float!
  endDate: ISO8601DateTime!
  id: ID!
  marketFeeWeiAmount: WeiAmount!
  open: Boolean!
  price: WeiAmount!
  priceInFiat: Fiat!
  sender: Ownerable!
  startDate: ISO8601DateTime!
  token: Token!
  tokenOffer: TokenOffer!
}
"The connection type for SingleSaleOffer."
type SingleSaleOfferConnection {
  "A list of edges."
  edges: [SingleSaleOfferEdge!]!
  "A list of nodes."
  nodes: [SingleSaleOffer!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type SingleSaleOfferEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SingleSaleOffer
}
"A skin to customize a user gallery"
type Skin implements Node {
  color: String
  id: ID!
  name: String!
  pictureUrl: String!
  position: SkinPosition!
  price: Int!
  quality: SkinQuality!
  unlocked: Boolean!
}
"The connection type for Skin."
type SkinConnection {
  "A list of edges."
  edges: [SkinEdge!]!
  "A list of nodes."
  nodes: [Skin!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type SkinEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Skin
}
"A SO5 Appearance - a card selected in a team for a SO5 fixture"
type So5Appearance implements Node {
  bonus: Float
  captain: Boolean!
  card: Card!
  cleanScore: Float
  game: Game
  id: ID!
  playerGameStats: PlayerGameStats
  relevantStats: Json!
  score: Float @deprecated(reason: "Use score under so5Score")
  so5Fixture: So5Fixture!
  so5Game: So5Game @deprecated(reason: "Not maintained anymore, use game instead")
  so5Lineup: So5Lineup!
  so5Score: So5Score
  status: String!
}
"The at least of clubs rule of a So5Leaderboard"
type So5AtLeastOfClubs {
  clubs: [Club!]!
  min: Int!
}
"The at least of competitions rule of a So5Leaderboard"
type So5AtLeastOfCompetitions {
  competitions: [Competition!]!
  min: Int!
}
"Common draft validation errors"
type So5CommonDraftError {
  code: Int!
  error: String!
  message: String!
  printablePlayers: [DraftablePlayer!]!
}
"So5 Global Config"
type So5Config {
  cardCollections: [CardCollection!]!
  id: ID!
  "Fetch teams playing in the upcoming So5 Fixture"
  nextSo5FixtureTeams: [Team!]!
  so5GlobalCupAlgoliaFilter: String
  so5LeaguesAlgoliaFilters: Json!
  "List of all the possible tournament rarity types"
  tournamentRarityTypes: [String!]!
  "List of all the possible tournament types"
  tournamentTypes: [String!]!
}
"A SO5 fixture"
type So5Fixture implements Node {
  aasmState: String!
  appearancesInFixtureInterval: [So5Appearance!]! @deprecated(reason: "Can be found with mySo5Lineups")
  canCompose: Boolean!
  "The `common_draft_campaign_so5_leaderboard` field cannot be nested within a list."
  commonDraftCampaignSo5Leaderboard: So5Leaderboard
  cutOffDate: ISO8601DateTime!
  displayName: String!
  endDate: ISO8601DateTime!
  eventType: String!
  gameWeek: Int!
  "The `games` field cannot be nested within a list."
  games: [Game!]!
  hashedSalt: String
  id: ID!
  myRecommendedSo5Leaderboards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): So5LeaderboardConnection! @deprecated(reason: "Use sorted leaderboards instead")
  "The `my_so5_games` field cannot be nested within a list."
  mySo5Games: [Game!]!
  mySo5Lineups(withTraining: Boolean, so5LeaderboardSlug: String, draft: Boolean, sortType: CustomSortingOption): [So5Lineup!]!
  "The `my_so5_lineups_count` field cannot be nested within a list."
  mySo5LineupsCount(so5LeaderboardSlug: String, training: Boolean, draft: Boolean): Int!
  mySo5LineupsPaginated(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,withTraining: Boolean, so5LeaderboardSlug: String, draft: Boolean, sortType: CustomSortingOption  ): So5LineupConnection!
  mySo5Rankings(withTraining: Boolean, withDraft: Boolean): [So5Ranking!]!
  mySo5Rewards: [So5Reward!]!
  "The `my_so5_user_groups` field cannot be nested within a list."
  mySo5UserGroups(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): So5UserGroupConnection!
  myTotalXpWon: Int!
  "The `next` field cannot be nested within a list."
  next: So5Fixture
  "The `onboarding_so5_leaderboard` field cannot be nested within a list."
  onboardingSo5Leaderboard: So5Leaderboard
  "The `ordered_so5_scores` field cannot be nested within a list."
  orderedSo5Scores(first: Int!): [OrderedSo5Scores!]!
  "Get ordered So5Score by position"
  orderedSo5ScoresByPosition(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,position: String!, minScore: Int  ): So5ScoreConnection!
  "The `previous` field cannot be nested within a list."
  previous: So5Fixture
  replayedFixture: So5Fixture
  salt: String
  shortDisplayName: String!
  slug: String!
  "The `so5_leaderboards` field cannot be nested within a list."
  so5Leaderboards(sortType: CustomSortingOption): [So5Leaderboard!]!
  "The `so5_leaderboards_paginated` field cannot be nested within a list."
  so5LeaderboardsPaginated(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: CustomSortingOption  ): So5LeaderboardConnection!
  "The `so5_leagues` field cannot be nested within a list."
  so5Leagues: [So5League!]!
  "The `so5_lineups_from_restriction_group` field cannot be nested within a list."
  so5LineupsFromRestrictionGroup(restrictionGroup: RestrictionGroup!): Boolean!
  so5Rewards: [So5Reward!]! @deprecated(reason: "Use leaderboard rewards instead")
  specialWeeklyBanner: SpecialWeeklyBanner
  startDate: ISO8601DateTime!
}
"The connection type for So5Fixture."
type So5FixtureConnection {
  "A list of edges."
  edges: [So5FixtureEdge!]!
  "A list of nodes."
  nodes: [So5Fixture!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type So5FixtureEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: So5Fixture
}
"A SO5 Game - a game included in a SO5 fixture (deprecated)"
type So5Game implements Node {
  game: Game!
  id: ID!
  so5Fixture: So5Fixture!
}
"A SO5 Leaderboard"
type So5Leaderboard implements Node & So5LeaderboardRulesInterface {
  algoliaFilters: String @deprecated(reason: "Use myEligibleCards instead")
  canCompose: Validity!
  challenges: [Challenge!]!
  commonDraftCampaign: CommonDraftCampaign
  defaultAverageScore: AveragePlayerScore
  description: String
  displayName: String!
  displayedRules: So5Rules
  division: Int!
  enabled: Boolean!
  engineConfiguration: EngineConfiguration!
  iconUrl: String
  id: ID!
  "The `my_eligible_cards` field cannot be nested within a list."
  myEligibleCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Full text search query to filter cards"
    query: String,
    "Whether to include cards already used in this fixture (default false)"
    includeUsed: Boolean,
    "Whether to include cards with no game in this fixture (default false)"
    includeNoGame: Boolean,
    "The card position to filter on or empty for the extra positions"
    position: Position,
    "Cards (slugs) already selected in the current lineup. They will not filtered out."
    selectedCards: [String!]!,
    "The card rarities to filter on (default to all rarities)"
    rarities: [Rarity!]
  ): CardConnection!
  mySo5Lineups: [So5Lineup!]!
  mySo5Rankings: [So5Ranking!]!
  "The `my_so5_user_groups` field cannot be nested within a list."
  mySo5UserGroups(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): So5UserGroupConnection!
  name: String! @deprecated(reason: "Replaced by title")
  powerCap: Float
  rarityType: String!
  rewardedLineupsCount: Int!
  rewards: Json! @deprecated(reason: "Replaced by rewardsConfig")
  rewardsConfig: LeaderboardRewardsConfig!
  rules: So5Rules
  scoringEngine: String @deprecated(reason: "Replaced by engineConfiguration")
  shieldName: String @deprecated(reason: "Not in use anymore")
  slug: String!
  so5Fixture: So5Fixture!
  so5League: So5League!
  so5Lineup(id: String): So5Lineup
  so5Lineups: [So5Lineup!]! @deprecated(reason: "Use so5LineupsPaginated instead")
  so5LineupsCount: Int!
  "The `so5_lineups_paginated` field cannot be nested within a list."
  so5LineupsPaginated(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): So5LineupConnection!
  "Get associated rankings. Empty until fixture is closed. The `so5_rankings` field cannot be nested within a list."
  so5Rankings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Show only followed users rankings"
    onlyFollowed: Boolean
  ): So5RankingConnection!
  "Get associated rankings, sorted by rank in ascending order. Empty until fixture is closed. The `so5_rankings_paginated` field cannot be nested within a list."
  so5RankingsPaginated(page: Int, pageSize: Int, 
    "Show only followed users rankings"
    onlyFollowed: Boolean,so5UserGroupSlug: String  ): So5RankingsPaginated!
  "The `so5_rankings_preview` field cannot be nested within a list."
  so5RankingsPreview: [So5Ranking!]!
  "Get associated rewards. Empty until fixture is closed. The `so5_rewards` field cannot be nested within a list."
  so5Rewards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): So5RewardConnection!
  teamsCap: Int
  title: String
  "High level overview of the rewards for the leaderboard"
  totalRewards: RewardsOverview!
  tournamentType: String!
  "The `universal_so5_user_groups` field cannot be nested within a list."
  universalSo5UserGroups: [So5UserGroup!]!
}
"The connection type for So5Leaderboard."
type So5LeaderboardConnection {
  "A list of edges."
  edges: [So5LeaderboardEdge!]!
  "A list of nodes."
  nodes: [So5Leaderboard!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type So5LeaderboardEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: So5Leaderboard
}
"A So5 league"
type So5League implements Node {
  category: String!
  description: String @deprecated(reason: "No longer maintained")
  displayName: String!
  "The `games` field cannot be nested within a list."
  games: [Game!]!
  id: ID!
  "The `my_so5_games` field cannot be nested within a list."
  mySo5Games: [Game!]!
  name: String!
  restrictionGroup: RestrictionGroup
  rewardPool(rarity: String!, quality: String!): [PlayerWithSupply!]!
  rewardPoolComputedAt: ISO8601DateTime
  shortDisplayName: String!
  slug: String!
  so5Fixture: So5Fixture!
  so5Leaderboards: [So5Leaderboard!]!
}
"A SO5 lineup"
type So5Lineup implements Node & SocialPicturesInterface {
  draft: Boolean!
  id: ID!
  name: String
  score: String @deprecated(reason: "use so5Rankings.score")
  so5Appearances: [So5Appearance!]!
  so5Fixture: So5Fixture!
  so5Leaderboard: So5Leaderboard
  "Only 1 ranking is returned. An array because a lineup could be played in multiple leaderboards previously."
  so5Rankings: [So5Ranking!]!
  socialPictureUrls: SocialPictureDerivative!
  user: User!
}
"The connection type for So5Lineup."
type So5LineupConnection {
  "A list of edges."
  edges: [So5LineupEdge!]!
  "A list of nodes."
  nodes: [So5Lineup!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type So5LineupEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: So5Lineup
}
"A user notification regarding a So5Lineup"
type So5LineupNotification implements Node & NotificationInterface {
  card: Card
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  read: Boolean!
  so5Lineup: So5Lineup!
  sport: Sport
  user: CurrentUser!
}
"A SO5 Ranking"
type So5Ranking implements Node {
  eligibleForReward: Boolean!
  eligibleRewards: [So5RewardConfig!]!
  id: ID!
  ranking: Int
  score: Float!
  so5Fixture: So5Fixture!
  so5Leaderboard: So5Leaderboard!
  so5Lineup: So5Lineup!
  tiebreakerScore: Float!
}
"The connection type for So5Ranking."
type So5RankingConnection {
  "A list of edges."
  edges: [So5RankingEdge!]!
  "A list of nodes."
  nodes: [So5Ranking!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type So5RankingEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: So5Ranking
}
type So5RankingsPaginated {
  currentPage: Int!
  id: String!
  pages: Int!
  so5Rankings: [So5Ranking!]!
  totalCount: Int!
}
"The rarity rule of a So5Leaderboard"
type So5Rarity {
  common: ValueBoundaries!
  customSeries: ValueBoundaries!
  limited: ValueBoundaries!
  rare: ValueBoundaries!
  superRare: ValueBoundaries!
  unique: ValueBoundaries!
}
"A SO5 Reward"
type So5Reward implements Node {
  aasmState: String!
  cards: [Card!]! @deprecated(reason: "Replaced by rewardCards")
  id: ID!
  ranking: Int! @deprecated(reason: "Replaced by so5Ranking")
  rewardCards: [RewardCard!]!
  slug: String!
  so5Fixture: So5Fixture!
  so5Leaderboard: So5Leaderboard!
  so5Ranking: So5Ranking
  weiAmount: String!
}
"A So5 Reward card config"
type So5RewardCardConfig {
  cardEdition: CardEdition @deprecated(reason: "replace by custom_card_edition_name")
  customCardEditionName: String
  displayEdition: String
  player: Player
  quality: CardQuality
  quantity: Int!
  rarity: Rarity!
}
"A So5 Reward config"
type So5RewardConfig {
  cards: [So5RewardCardConfig!]
  "Rewarded amount in ETH when fixed in ETH"
  ethAmount: Float
  experiences: [So5RewardExperience!]
  id: String @deprecated(reason: "useless")
  "Minimum USD amount guaranteed when prizes are in ETH"
  minimumGuaranteedUsdAmount: Float
  rankPct: Float
  ranks: Int
  score: Float
  "Rewarded amount in USD when fixed in USD"
  usdAmount: Float
}
"The connection type for So5Reward."
type So5RewardConnection {
  "A list of edges."
  edges: [So5RewardEdge!]!
  "A list of nodes."
  nodes: [So5Reward!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type So5RewardEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: So5Reward
}
"A So5 Leaderboard experience rewards config"
type So5RewardExperience {
  description: String
  pictureUrl: String
  type: CustomRewardExperience!
}
"The So5 fields"
type So5Root {
  cardCollection(slug: String!): CardCollection!
  eligibleTournamentsForSo5UserGroups: [So5UserGroupTournament!]!
  featuredSo5Fixtures(first: Int): [So5Fixture!]!
  id: ID!
  "Get a So5Fixture"
  so5Fixture(id: ID, slug: String, type: So5State): So5Fixture
  "Get a list of So5Fixture"
  so5Fixtures(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): So5FixtureConnection!
  "Get a So5UserGroup"
  so5UserGroup(slug: String, joinSecret: String): So5UserGroup!
  "Get a So5UserGroupMembership"
  so5UserGroupMembership(id: String!): So5UserGroupMembership!
}
"The rule set of a So5Leaderboard"
type So5Rules {
  activeClubs: [Club!]
  age: Age
  allowLegend: Boolean!
  atLeastOfClubs: So5AtLeastOfClubs
  atLeastOfCompetitions: So5AtLeastOfCompetitions
  averageScore: ValueOpenBoundaries @deprecated(reason: "No longer maintained")
  averageScorePlayersCount: AverageScorePlayersCount @deprecated(reason: "No longer maintained")
  captain: Json
  captainRarities: [String!]
  "Enforces restrictions on the card's editions in this leaderboard when set."
  cardEditionsCount: CardEditionsCount
  cardsCountOfCurrentUser: MaximumCardsCountOwnedByUser
  clubs: [Club!] @deprecated(reason: "No longer maintained")
  competitions: [Competition!]
  id: String!
  internationalCompetitions: [Competition!]
  leagues: [Competition!]
  maxAge: Int @deprecated(reason: "replaced by age")
  maximumPlayersAverageScore: AverageScoreOpenBoundaries
  minAge: Int @deprecated(reason: "replaced by age")
  minimumPlayersAverageScore: AverageScoreOpenBoundaries
  nationalities: [Country!]
  notDomesticCompetitions: [Competition!]
  notNationalities: [Country!]
  rarities: [String!]
  rarityLimits: So5Rarity
  sameActiveClub: ValueOpenBoundaries
  sameClub: Boolean @deprecated(reason: "No longer maintained")
  sameNationality: Boolean
  seasons: [Season!]
  serialNumber: String
}
"A SO5 Score"
type So5Score implements Node {
  allAroundStats: [StatScore!]!
  decisiveScore: StatScore
  detailedScore: [StatScore!]!
  game: Game!
  id: ID!
  negativeDecisiveStats: [StatScore!]!
  player: Player!
  playerGameStats: PlayerGameStats!
  position: String!
  positiveDecisiveStats: [StatScore!]!
  score: Float
  scoringVersion: Int!
}
"The connection type for So5Score."
type So5ScoreConnection {
  "A list of edges."
  edges: [So5ScoreEdge!]!
  "A list of nodes."
  nodes: [So5Score!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type So5ScoreEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: So5Score
}
"A SO5 User Group"
type So5UserGroup implements Node {
  administrator: User!
  commonDraftCampaignSo5Leaderboard: So5Leaderboard
  description: String
  displayName: String!
  endSo5Fixture: So5Fixture
  id: ID!
  joinDisabled: Boolean!
  joinSecret: String!
  liveSo5Leaderboard: So5Leaderboard
  logo: Skin
  membershipsPaginated(page: Int, pageSize: Int): So5UserGroupMembershipsPaginated!
  myMembership: So5UserGroupMembership
  rewardsConfig: LeaderboardRewardsConfig!
  slug: String!
  startSo5Fixture: So5Fixture!
  tournament: So5UserGroupTournament!
  upcomingSo5Leaderboard: So5Leaderboard
}
"The connection type for So5UserGroup."
type So5UserGroupConnection {
  "A list of edges."
  edges: [So5UserGroupEdge!]!
  "A list of nodes."
  nodes: [So5UserGroup!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type So5UserGroupEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: So5UserGroup
}
"A SO5 User Group membership"
type So5UserGroupMembership implements Node {
  administrator: Boolean!
  createdAt: ISO8601DateTime!
  eligibleRewards: [So5RewardConfig!]!
  id: ID!
  liveSo5Ranking: So5Ranking
  ranking: Int!
  score: Int!
  "The `so5_rankings` field cannot be nested within a list."
  so5Rankings(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): So5RankingConnection!
  user: User!
}
type So5UserGroupMembershipsPaginated {
  currentPage: Int!
  id: String!
  memberships: [So5UserGroupMembership!]!
  pages: Int!
  totalCount: Int!
}
"A user notification regarding a so5 user group"
type So5UserGroupNotification implements Node & NotificationInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  membership: So5UserGroupMembership
  name: String!
  otherMembershipsCount: Int!
  read: Boolean!
  so5UserGroup: So5UserGroup!
  sport: Sport
  user: CurrentUser!
}
"A SO5 User Group tournament"
type So5UserGroupTournament implements Node {
  displayName: String!
  division: Int!
  id: ID!
  tournamentType: String!
}
"A Social picture with all its derivative"
type SocialPictureDerivative {
  post: String
  square: String
  story: String
}
"An encrypted private key"
type SorarePrivateKey {
  encryptedPrivateKey: String!
  iv: String!
  salt: String!
}
"A special weekly banner"
type SpecialWeeklyBanner implements Node & WithPictureInterface {
  background: String
  cardUrl: String
  href: String
  hrefLabel: String
  id: ID!
  logoUrl: String
  pictureUrl(derivative: String): String
  prizeLabel: String
  sectionName: String
  slug: String!
  subtitle: String
  title: String!
}
"A Starkware Account"
type StarkwareAccount implements Node {
  id: ID!
  starkKey: String!
  user: User
}
"Withdrawal of a token to Ethereum"
type StarkwareWithdrawal implements Node {
  aasmState: String!
  card: Card
  destination: String
  ethereumTransaction: EthereumTransaction
  id: ID!
}
"Score contribution of a given stat"
type StatScore {
  category: StatCategory!
  points: Float!
  stat: String!
  statValue: Float!
  totalScore: Float!
}
"Stats of a player for a competition"
type Stats {
  appearances: Int!
  assists: Int!
  goals: Int!
  id: String!
  minutesPlayed: Int!
  player: Player @deprecated(reason: "Use the player in the upper context instead")
  redCards: Int!
  season: Season
  substituteIn: Int!
  substituteOut: Int!
  yellowCards: Int!
}
type Subscription {
  aCardWasUpdated(playerSlugs: [String!], ages: [Int!], cardEditions: [String!], seasonStartYears: [Int!], owned: Boolean, positions: [Position!], rarities: [Rarity!], serialNumbers: [Int!], shirtNumbers: [Int!], slugs: [String!], events: [CardWasUpdatedEvent!]): CardSubscription!
  bundledAuctionWasUpdated: BundledAuction!
  currentUserWasUpdated: CurrentUser!
  gameWasUpdated: Game!
  offerWasUpdated: Offer!
  packWasSold(id: ID!): Pack! @deprecated(reason: "Not used anymore.")
  "Triggered on new bid or card sold on the public market"
  publicMarketWasUpdated: Card!
  "Triggered on new bid or ended auction"
  tokenAuctionWasUpdated(sports: [Sport!]): TokenAuction!
  "Triggered on offer accepted/cancelled/ended"
  tokenOfferWasUpdated(sports: [Sport!]): TokenOffer!
}
"Subscription statistics for a subscribable, like a Player or a Card"
type SubscriptionStats {
  subscribersCount: Int!
}
"Represents a list of players available for a minting quota organized by tiers"
type TieredPlayerPool {
  tier0: [String!]!
  tier1: [String!]!
  tier2: [String!]!
  tier3: [String!]!
}
"A title body notification rendered for mobile"
type TitleBodyNotificationMobileRendering {
  body: String!
  deepLinkUrl: String!
  iconUrl: String
  title: String!
}
"A title body notification rendering instruction"
type TitleBodyNotificationRendering {
  mobile: TitleBodyNotificationMobileRendering
}
type Token implements Node {
  assetId: String!
  collection: Collection!
  collectionName: String
  contractAddress: String!
  ethereumId: String!
  ethereumOwner: TokenOwner
  id: ID!
  latestEnglishAuction: TokenAuction
  latestOwner(blockchain: Blockchain!): TokenOwner
  liveSingleBuyOffers: [TokenOffer!]!
  liveSingleSaleOffer: TokenOffer
  metadata: TokenMetadata!
  myMintedSingleSaleOffer: TokenOffer
  name: String!
  owner: TokenOwner
  ownershipHistory: [TokenOwner!]!
  pendingWithdrawal: TokenWithdrawal
  pictureUrl(derivative: String): String
  priceRange: Range
  privateMinPrice: String
  publicMinPrice: String
  slug: String!
  tradeableStatus: Tradeable!
  walletStatus: WalletStatus!
}
"An auction in the Token service"
type TokenAuction implements Node {
  autoBid: Boolean!
  bestBid: TokenBid
  "The `bids` field cannot be nested within a list."
  bids(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): TokenBidConnection!
  bidsCount: Int!
  blockchainId: String!
  cancelled: Boolean!
  creditCardFee: Float!
  "Current price, in wei."
  currentPrice: String!
  endDate: ISO8601DateTime!
  id: ID!
  "Minimum next bid amount, in wei."
  minNextBid: String!
  nfts: [Token!]!
  open: Boolean!
  startDate: ISO8601DateTime!
}
"The connection type for TokenAuction."
type TokenAuctionConnection {
  "A list of edges."
  edges: [TokenAuctionEdge!]!
  "A list of nodes."
  nodes: [TokenAuction!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type TokenAuctionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TokenAuction
}
"Baseball token metadata"
type TokenBaseballMetadata implements Node & TokenCardMetadataInterface {
  id: ID!
  playerDisplayName: String!
  playerPositions: [String!]!
  playerSlug: String!
  rarity: Rarity!
  seasonStartYear: Int!
  serialNumber: Int!
  singleCivilYear: Boolean!
  supply: Int!
  teamSlug: String!
}
"A bid on an TokenAuction"
type TokenBid implements Node {
  "Bid amount, in wei."
  amount: String!
  amountInFiat: Fiat!
  auction: TokenAuction!
  bidder: BlockchainUser
  createdAt: ISO8601DateTime!
  id: ID!
  maximumAmount: String
  maximumAmountInFiat: Fiat
}
"The connection type for TokenBid."
type TokenBidConnection {
  "A list of edges."
  edges: [TokenBidEdge!]!
  "A list of nodes."
  nodes: [TokenBid!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type TokenBidEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TokenBid
}
"The connection type for Token."
type TokenConnection {
  "A list of edges."
  edges: [TokenEdge!]!
  "A list of nodes."
  nodes: [Token!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"Payload required to make a Starkware NFT deposit"
type TokenDeposit {
  assetType: String!
  starkKey: String!
  tokenId: String!
  vaultId: Int!
}
"An edge in a connection."
type TokenEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Token
}
"Football token metadata"
type TokenFootballMetadata implements Node & TokenCardMetadataInterface {
  id: ID!
  playerDisplayName: String!
  playerPosition: String!
  playerSlug: String!
  rarity: Rarity!
  seasonStartYear: Int!
  serialNumber: Int!
  singleCivilYear: Boolean!
  supply: Int!
  teamSlug: String!
}
"An offer in the Token service"
type TokenOffer implements Node {
  acceptedAt: ISO8601DateTime
  actualReceiver: BlockchainUser
  blockchainId: String
  cancelledAt: ISO8601DateTime
  counteredOffer: TokenOffer
  createdAt: ISO8601DateTime!
  creditCardFee: Float!
  endDate: ISO8601DateTime!
  id: ID!
  marketFeeAmountFiat: Fiat!
  marketFeeAmountWei: WeiAmount
  priceFiat: Fiat!
  priceWei: WeiAmount!
  receiver: BlockchainUser
  receiverSide: TokenOfferSide!
  sender: BlockchainUser!
  senderSide: TokenOfferSide!
  startDate: ISO8601DateTime!
  status: String!
}
"The connection type for TokenOffer."
type TokenOfferConnection {
  "A list of edges."
  edges: [TokenOfferEdge!]!
  "A list of nodes."
  nodes: [TokenOffer!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
  totalCount: Int!
}
"An edge in a connection."
type TokenOfferEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TokenOffer
}
"One side of an Offer"
type TokenOfferSide {
  fiat: Fiat!
  id: String!
  nfts: [Token!]!
  wei: String!
}
type TokenOwner implements Node {
  account: Account
  address: String!
  blockchain: Blockchain!
  deal: TokenDeal
  from: ISO8601DateTime!
  id: ID!
  optimistic: Boolean!
  priceFiat: Fiat!
  priceWei: String!
  referenceId: String @deprecated(reason: "Use transfer_type and deal fields instead")
  token: Token!
  transferType: OwnerTransfer!
  user: User
}
"A recorded market price for a Token"
type TokenPrice implements Node {
  amount: String!
  amountInFiat: Fiat!
  date: ISO8601DateTime!
  deal: TokenDeal!
  id: ID!
}
"A primary offer in the Token service"
type TokenPrimaryOffer implements Node {
  createdAt: ISO8601DateTime!
  id: ID!
  status: String!
}
"The Tokens queries"
type TokenRoot {
  allNfts(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sport: [Sport!] = null  ): TokenConnection!
  auction(id: String!): TokenAuction!
  auctions(ids: [String!]!): [TokenAuction!]!
  nft(assetId: String!): Token!
  nfts(assetIds: [String!]!): [Token!]!
  offer(id: String!): TokenOffer!
  offers(ids: [String!]!): [TokenOffer!]!
  tokenPrices(playerSlug: String!, collection: Collection!, rarity: Rarity!): [TokenPrice!]!
}
"Withdrawal of an NFT to Ethereum"
type TokenWithdrawal implements Node {
  aasmState: String!
  destination: String
  id: ID!
}
"The Transfer Market queries"
type TransferMarket {
  banners: [TransferMarketBanner!]! @deprecated(reason: "use ConfigType.heroBanners")
  bundledAuction(slug: String!): BundledAuction
  bundledAuctionsWithCards(slugs: [String!]!): [BundledAuction!]!
  bundlesFirst: Boolean!
  cardWeiMinPrice: String!
  englishAuction(slug: String!): BundledAuction!
  englishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,playerSlugs: [String!], 
    "Filter on single or multi card auctions or get all auctions by omitting this argument"
    bundled: Boolean
  ): EnglishAuctionConnection!
  featuredBundledAuctions(size: Int, window: Int): [BundledAuction!]!
  id: String!
  offer(id: String!): Offer!
  powerHourStartDate: ISO8601DateTime
  secondaryBanners: [TransferMarketBanner!]! @deprecated(reason: "use ConfigType.banners")
  "Last 500 SingleSaleOffer, sorted by `endDate` in descending order."
  singleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): SingleSaleOfferConnection!
}
"A transfer market banner"
type TransferMarketBanner implements Node & WithPictureInterface {
  background: String
  colorLeft: String
  colorRight: String
  href: String
  hrefLabel: String
  id: ID!
  pictureUrl(derivative: String): String
  slug: String!
  subtitle: String
  title: String!
  videoUrl: String
}
"Signable payload for a Starkware transfer request"
type TransferRequest {
  amount: String!
  condition: String
  expirationTimestamp: Int!
  feeInfoUser: Fee
  nonce: Int!
  receiverPublicKey: String!
  receiverVaultId: Int!
  senderVaultId: Int!
  token: String!
}
"Autogenerated return type of UnblockEmail"
type UnblockEmailPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"A Sorare user"
type User implements Node & PublicUserInfoInterface {
  allTimeBestDecksInFormation: [DeckInFormation!]! @deprecated(reason: "No longer maintained")
  awards: [UserAward!]!
  baseballProfile: UserSportProfile
  "The `bought_single_sale_offers` field cannot be nested within a list."
  boughtSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `bought_single_sale_token_offers` field cannot be nested within a list."
  boughtSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `buying_english_auctions` field cannot be nested within a list."
  buyingEnglishAuctions(
    "Returns auctions sorted by `startDate` in descending order when set."
    newlyListed: Boolean
  ): [EnglishAuction!]!
  "The `buying_token_auctions` field cannot be nested within a list."
  buyingTokenAuctions(
    "Returns auctions sorted by `startDate` in descending order when set."
    newlyListed: Boolean,sport: [Sport!]  ): [TokenAuction!]!
  cardCounts: CardCount!
  cardsCount: Int!
  createdAt: ISO8601DateTime!
  "The `custom_decks` field cannot be nested within a list."
  customDecks(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CustomDeckConnection!
  "The `ended_with_no_buyer_single_sale_offers` field cannot be nested within a list."
  endedWithNoBuyerSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `ended_with_no_buyer_single_sale_token_offers` field cannot be nested within a list."
  endedWithNoBuyerSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `english_auctions` field cannot be nested within a list."
  englishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  ethVaultId: Int
  ethereumAddress: String!
  followed: EmailSubscription
  "The `followers` field cannot be nested within a list."
  followers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!
  "The `following` field cannot be nested within a list."
  following(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!
  footballProfile(variant: UserSportProfileVariant): UserSportProfile
  highlightedDeck: HighlightedDeck
  id: ID!
  "The `live_single_sale_offers` field cannot be nested within a list."
  liveSingleSaleOffers(
    "Returns single sale offers sorted by `startDate` in descending order when set."
    newlyListed: Boolean
  ): [SingleSaleOffer!]! @deprecated(reason: "Use the paginated version instead")
  "The `live_single_sale_token_offers` field cannot be nested within a list."
  liveSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `lost_english_auctions` field cannot be nested within a list."
  lostEnglishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  "The `lost_token_auctions` field cannot be nested within a list."
  lostTokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
  nbaProfile: UserSportProfile
  nickname: String!
  "The `paginated_cards` field cannot be nested within a list."
  paginatedCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  "The `paginated_live_single_sale_offers` field cannot be nested within a list."
  paginatedLiveSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  profile: UserProfile!
  "The `single_sale_offers` field cannot be nested within a list."
  singleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `single_sale_token_offers` field cannot be nested within a list."
  singleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  slug: String!
  "The `sold_single_sale_offers` field cannot be nested within a list."
  soldSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `sold_single_sale_token_offers` field cannot be nested within a list."
  soldSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  sorareAddress: String
  starkKey: String
  starkKeyRegistered: Boolean!
  "The `token_auctions` field cannot be nested within a list."
  tokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
  "The `won_english_auctions` field cannot be nested within a list."
  wonEnglishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  "The `won_token_auctions` field cannot be nested within a list."
  wonTokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
}
"A user account entry"
type UserAccountEntry implements Node {
  aasmState: UserAccountEntryState!
  amount: String!
  amountInFiat: Fiat!
  date: ISO8601DateTime!
  entryType: UserAccountEntryEntry!
  id: ID!
  operation: UserAccountEntryOperation
  provisional: Boolean!
  tokenOperation: UserAccountEntryTokenOperation
  user: User!
}
"The connection type for UserAccountEntry."
type UserAccountEntryConnection {
  "A list of edges."
  edges: [UserAccountEntryEdge!]!
  "A list of nodes."
  nodes: [UserAccountEntry!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type UserAccountEntryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserAccountEntry
}
"A user award"
type UserAward implements Node {
  award: Award!
  category: AwardCategory!
  claimableReward: Int
  claimedLevel: Int
  completed: Boolean!
  id: ID!
  level: Int!
  maxLevel: Int!
  nextLevel: Int!
  nextRequirement: String
  nextReward: Int
  progression: String
  slug: String!
}
"A user notification regarding an Award event"
type UserAwardNotification implements Node & NotificationInterface {
  amount: Int
  award: UserAward!
  createdAt: ISO8601DateTime!
  id: ID!
  level: Int
  name: String!
  read: Boolean!
  sport: Sport
  user: CurrentUser!
}
"The connection type for User."
type UserConnection {
  "A list of edges."
  edges: [UserEdge!]!
  "A list of nodes."
  nodes: [User!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type UserEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: User
}
"A user-readable error"
type UserError {
  "The error code"
  code: Int
  "A description of the error"
  message: String!
  "Which input value this error came from"
  path: [String!]
}
"An object representing the past or present ownership of a card by a user"
type UserOwner implements OwnerInterface {
  account: Account
  address: String!
  blockchain: String!
  card: Card!
  "The deal id that created this owner in case it comes from an offer"
  dealId: String @deprecated(reason: "no longer maintained")
  from: ISO8601DateTime!
  id: ID!
  migratorApproval: Boolean! @deprecated(reason: "use account.accountable.migratorApproved")
  newId: String @deprecated(reason: "use id")
  optimistic: Boolean!
  ownerable: User!
  "Card price, in wei."
  price: String!
  referenceId: String
  transferType: String!
  userNonce: Int @deprecated(reason: "no longer maintained")
}
"An owner with conversion rates"
type UserOwnerWithRates implements OwnerInterface {
  account: Account
  address: String!
  blockchain: String!
  card: Card!
  "The deal id that created this owner in case it comes from an offer"
  dealId: String @deprecated(reason: "no longer maintained")
  from: ISO8601DateTime!
  id: ID!
  migratorApproval: Boolean! @deprecated(reason: "use account.accountable.migratorApproved")
  newId: String @deprecated(reason: "use id")
  optimistic: Boolean!
  ownerable: User!
  "Card price, in wei."
  price: String!
  priceInFiat: Fiat!
  referenceId: String
  transferType: String!
  userNonce: Int @deprecated(reason: "no longer maintained")
}
"A Sorare user profile"
type UserProfile implements Node & WithPictureInterface {
  clubBanner: Skin
  clubName: String!
  clubShield: Skin
  discordUsername: String
  id: ID!
  pictureUrl(derivative: String): String
  "The date the user created his first non rookie / training lineup"
  proSince: ISO8601DateTime @deprecated(reason: "Pro concept is no longer being used")
  rookie: Boolean! @deprecated(reason: "Rookie concept is no longer being used")
  status: String
  twitterUsername: String
  user: User!
  verified: Boolean!
}
"A Sorare user settings"
type UserSettings {
  currency: Currency
  disableAllEmails: Boolean!
  fiatCurrency: FiatCurrency
  hideBalance: Boolean!
  hideCommonCards: Boolean!
  id: ID!
  lastTcuVersionAccepted: Boolean! @deprecated(reason: "Prefer using tcuStatus")
  lifecycle: Json!
  locale: String
  notificationPreferences: [NotificationPreference!]!
  referrerPreferredRewardSport: Sport
  "User status with regards to Sorare's TCU"
  tcuStatus: TermsAndConditionsStatus!
}
"An affiliate"
type UserSource implements Node {
  id: ID!
  name: String!
}
"A Sorare user sport specific profile"
type UserSportProfile implements Node {
  id: ID!
  onboarded: Boolean!
  onboardingStatus: UserSportProfileOnboardingStatus!
  sport: Sport!
  variant: UserSportProfileVariant!
}
"A Sorare user with the subscription slug of the current user"
type UserWithSubscriptionSlug implements PublicUserInfoInterface & UserSocialInterface {
  allTimeBestDecksInFormation: [DeckInFormation!]! @deprecated(reason: "No longer maintained")
  awards: [UserAward!]!
  baseballProfile: UserSportProfile
  "The `bought_single_sale_offers` field cannot be nested within a list."
  boughtSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `bought_single_sale_token_offers` field cannot be nested within a list."
  boughtSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `buying_english_auctions` field cannot be nested within a list."
  buyingEnglishAuctions(
    "Returns auctions sorted by `startDate` in descending order when set."
    newlyListed: Boolean
  ): [EnglishAuction!]!
  "The `buying_token_auctions` field cannot be nested within a list."
  buyingTokenAuctions(
    "Returns auctions sorted by `startDate` in descending order when set."
    newlyListed: Boolean,sport: [Sport!]  ): [TokenAuction!]!
  cardCounts: CardCount!
  cardsCount: Int!
  createdAt: ISO8601DateTime!
  "The `custom_decks` field cannot be nested within a list."
  customDecks(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CustomDeckConnection!
  "The `ended_with_no_buyer_single_sale_offers` field cannot be nested within a list."
  endedWithNoBuyerSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `ended_with_no_buyer_single_sale_token_offers` field cannot be nested within a list."
  endedWithNoBuyerSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `english_auctions` field cannot be nested within a list."
  englishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  ethVaultId: Int
  ethereumAddress: String!
  followed: EmailSubscription
  "The `followers` field cannot be nested within a list."
  followers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!
  "The `following` field cannot be nested within a list."
  following(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!
  footballProfile(variant: UserSportProfileVariant): UserSportProfile
  highlightedDeck: HighlightedDeck
  id: ID!
  "The `live_single_sale_offers` field cannot be nested within a list."
  liveSingleSaleOffers(
    "Returns single sale offers sorted by `startDate` in descending order when set."
    newlyListed: Boolean
  ): [SingleSaleOffer!]! @deprecated(reason: "Use the paginated version instead")
  "The `live_single_sale_token_offers` field cannot be nested within a list."
  liveSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `lost_english_auctions` field cannot be nested within a list."
  lostEnglishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  "The `lost_token_auctions` field cannot be nested within a list."
  lostTokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
  nbaProfile: UserSportProfile
  nickname: String!
  "The `paginated_cards` field cannot be nested within a list."
  paginatedCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  "The `paginated_live_single_sale_offers` field cannot be nested within a list."
  paginatedLiveSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  profile: UserProfile!
  "The `single_sale_offers` field cannot be nested within a list."
  singleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `single_sale_token_offers` field cannot be nested within a list."
  singleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  slug: String!
  "The `sold_single_sale_offers` field cannot be nested within a list."
  soldSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `sold_single_sale_token_offers` field cannot be nested within a list."
  soldSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  sorareAddress: String
  starkKey: String
  starkKeyRegistered: Boolean!
  subscriptionSlug: String
  "The `token_auctions` field cannot be nested within a list."
  tokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
  "The `won_english_auctions` field cannot be nested within a list."
  wonEnglishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  "The `won_token_auctions` field cannot be nested within a list."
  wonTokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
}
"The connection type for UserWithSubscriptionSlug."
type UserWithSubscriptionSlugConnection {
  "A list of edges."
  edges: [UserWithSubscriptionSlugEdge!]!
  "A list of nodes."
  nodes: [UserWithSubscriptionSlug!]!
  "Information to aid in pagination."
  pageInfo: PageInfo!
}
"An edge in a connection."
type UserWithSubscriptionSlugEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UserWithSubscriptionSlug
}
"A boolean value and its reason"
type Validity {
  reason: String
  value: Boolean!
}
type ValueBoundaries {
  max: Int!
  min: Int!
}
type ValueOpenBoundaries {
  max: Int
  min: Int
}
"A withdrawal"
type Withdrawal implements Node {
  agreedFeeAmount: String!
  amount: String!
  createdAt: ISO8601DateTime!
  id: ID!
  status: WithdrawalStatus!
  to: String!
  transactionHash: String
}
"A withdrawal with conversion rates"
type WithdrawalWithRates implements Node {
  agreedFeeAmount: String!
  amount: String!
  amountInFiat: Fiat!
  createdAt: ISO8601DateTime!
  id: ID!
  status: WithdrawalStatus!
  to: String!
  transactionHash: String
}
"Autogenerated return type of acceptOffer"
type acceptOfferPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  offer: Offer
  "The sport-agnostic offer"
  tokenOffer: TokenOffer
}
"Autogenerated return type of acceptTerms"
type acceptTermsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  result: String!
}
"Autogenerated return type of addCardsToDeck"
type addCardsToDeckPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  deck: DeckInterface
  errors: [UserError!]!
}
"Autogenerated return type of addEmailToList"
type addEmailToListPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
}
"Autogenerated return type of addFavouriteClubs"
type addFavouriteClubsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of approveMigrator"
type approveMigratorPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
}
"Autogenerated return type of bid"
type bidPayload {
  bid: Bid
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  "The sport-agnostic bid"
  tokenBid: TokenBid
}
"Autogenerated return type of blockUserOffers"
type blockUserOffersPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
}
"Autogenerated return type of buySkin"
type buySkinPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  skin: Skin
}
"Autogenerated return type of cancelEthBankWithdrawals"
type cancelEthBankWithdrawalsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of cancelFastWithdrawal"
type cancelFastWithdrawalPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  fastWithdrawal: FastWithdrawal
}
"Autogenerated return type of cancelOffer"
type cancelOfferPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  offer: Offer
  "The sport-agnostic offer"
  tokenOffer: TokenOffer
}
"Autogenerated return type of cancelWithdrawal"
type cancelWithdrawalPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  withdrawal: Withdrawal
}
"Autogenerated return type of checkPhoneNumberVerificationCode"
type checkPhoneNumberVerificationCodePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of claimAward"
type claimAwardPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of claimCardDrop"
type claimCardDropPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of claimReferralReward"
type claimReferralRewardPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  referralReward: ReferralReward
}
"Autogenerated return type of claimReward"
type claimRewardPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5Reward: So5Reward
}
"Autogenerated return type of completeOnboardingTask"
type completeOnboardingTaskPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of confirmEmail"
type confirmEmailPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of confirmSo5Lineups"
type confirmSo5LineupsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  so5Lineups: [So5Lineup!]!
}
"Autogenerated return type of createCardWithdrawal"
type createCardWithdrawalPayload {
  card: Card
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  token: Token
}
"Autogenerated return type of createCustomDeck"
type createCustomDeckPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  deck: CustomDeck
  errors: [UserError!]!
}
"Autogenerated return type of createDirectOffer"
type createDirectOfferPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  offer: Offer
  "The sport-agnostic offer"
  tokenOffer: TokenOffer
}
"Autogenerated return type of createDraftAndSo5Lineup"
type createDraftAndSo5LineupPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5Lineup: So5Lineup
}
"Autogenerated return type of createEthBankWithdrawalIntent"
type createEthBankWithdrawalIntentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  ethBankWithdrawalIntent: EthBankWithdrawalIntent
}
"Autogenerated return type of createEthMigration"
type createEthMigrationPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of createEthVault"
type createEthVaultPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of createFastWithdrawal"
type createFastWithdrawalPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of createOrUpdateSingleBuyOfferMinPrice"
type createOrUpdateSingleBuyOfferMinPricePayload {
  card: Card
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  singleBuyOfferMinPrice: SingleBuyOfferMinPrice @deprecated(reason: "Retrieve card or token instead")
  token: Token
}
"Autogenerated return type of createOrUpdateSo5Lineup"
type createOrUpdateSo5LineupPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  so5Lineup: So5Lineup
}
"Autogenerated return type of createPaymentIntent"
type createPaymentIntentPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUserPaymentMethods: [PaymentMethod!]
  errors: [UserError!]!
  paymentIntent: PaymentIntent
}
"Autogenerated return type of createSingleBuyOffer"
type createSingleBuyOfferPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  offer: Offer
  "The sport-agnostic offer"
  tokenOffer: TokenOffer
}
"Autogenerated return type of createSingleSaleOffer"
type createSingleSaleOfferPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  offer: SingleSaleOffer
  "The sport-agnostic offer"
  tokenOffer: TokenOffer
}
"Autogenerated return type of createSo5UserGroup"
type createSo5UserGroupPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  so5UserGroup: So5UserGroup
}
"Autogenerated return type of createSubscription"
type createSubscriptionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  subscription: EmailSubscription
}
"Autogenerated return type of createWithdrawal"
type createWithdrawalPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  withdrawal: Withdrawal
}
"Autogenerated return type of deleteCustomDeck"
type deleteCustomDeckPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  deck: CustomDeck
  errors: [UserError!]!
}
"Autogenerated return type of deleteSo5Lineup"
type deleteSo5LineupPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  so5Leaderboard: So5Leaderboard!
}
"Autogenerated return type of deleteSo5UserGroup"
type deleteSo5UserGroupPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
}
"Autogenerated return type of deleteSubscription"
type deleteSubscriptionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  subscribable: Subscribable
  subscription: EmailSubscription
}
"Autogenerated return type of deleteUserSo5Lineups"
type deleteUserSo5LineupsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  so5Fixture: So5Fixture!
}
"Autogenerated return type of destroyAccount"
type destroyAccountPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of destroyReferral"
type destroyReferralPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of detachPaymentMethod"
type detachPaymentMethodPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser!
  errors: [UserError!]!
}
"Autogenerated return type of disable2fa"
type disable2faPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of disconnectOmniauthProvider"
type disconnectOmniauthProviderPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  userProfile: UserProfile
}
"Autogenerated return type of editCardInDeck"
type editCardInDeckPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  deck: DeckInterface
  errors: [UserError!]!
}
"Autogenerated return type of editCustomDeck"
type editCustomDeckPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  deck: CustomDeck
  errors: [UserError!]!
}
"Autogenerated return type of enable2fa"
type enable2faPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  otpBackupCodes: [String!]
}
"Autogenerated return type of generateActionRewardPickablePlayers"
type generateActionRewardPickablePlayersPayload {
  actionReward: ActionReward
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of generateOtpBackupCodes"
type generateOtpBackupCodesPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  otpBackupCodes: [String!]
}
"Autogenerated return type of joinSo5UserGroup"
type joinSo5UserGroupPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  so5UserGroup: So5UserGroup
}
"Autogenerated return type of markNotificationsAsRead"
type markNotificationsAsReadPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of mintCardsForUsers"
type mintCardsForUsersPayload {
  cards: [Card!]
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
}
"Autogenerated return type of pickActionRewardPlayers"
type pickActionRewardPlayersPayload {
  actionReward: ActionReward
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of prepareAcceptOffer"
type prepareAcceptOfferPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  limitOrders: [LimitOrder!]
}
"Autogenerated return type of prepareBid"
type prepareBidPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  limitOrders: [LimitOrder!]
}
"Autogenerated return type of prepareCardWithdrawal"
type prepareCardWithdrawalPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  transferRequest: TransferRequest
}
"Autogenerated return type of prepareEthDeposit"
type prepareEthDepositPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  ethDeposit: EthDeposit
}
"Autogenerated return type of prepareOffer"
type prepareOfferPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  "List of LimitOrder objects used as payload to sign for the `createSingleSaleOffer`, `createDirectOffer` or `createSingleBuyOffer` mutations."
  limitOrders: [LimitOrder!]
}
"Autogenerated return type of prepareTokenDeposit"
type prepareTokenDepositPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  tokenDeposit: TokenDeposit
}
"Autogenerated return type of rejectOffer"
type rejectOfferPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  offer: Offer
  "The sport-agnostic offer"
  tokenOffer: TokenOffer
}
"Autogenerated return type of relayCall"
type relayCallPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser!
  errors: [UserError!]!
  transaction: EthereumTransaction
}
"Autogenerated return type of removeCardFromDeck"
type removeCardFromDeckPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  deck: DeckInterface
  errors: [UserError!]!
}
"Autogenerated return type of removeUserFromSo5UserGroup"
type removeUserFromSo5UserGroupPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  so5UserGroup: So5UserGroup
}
"Autogenerated return type of requestReceipt"
type requestReceiptPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  payment: Payment
}
"Autogenerated return type of resendConfirmationInstructions"
type resendConfirmationInstructionsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of resetPrivateKey"
type resetPrivateKeyPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser!
  errors: [UserError!]!
}
"Autogenerated return type of resumeOnboarding"
type resumeOnboardingPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of setDeviceToken"
type setDeviceTokenPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
}
"Autogenerated return type of signIn"
type signInPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
  otpSessionChallenge: String
  "tcuToken is returned when the user must accept the TCUs before signing in"
  tcuToken: String
}
"Autogenerated return type of signInWithOAuth"
type signInWithOAuthPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of signOutFromAllDevices"
type signOutFromAllDevicesPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
}
"Autogenerated return type of signUp"
type signUpPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of skipOnboarding"
type skipOnboardingPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Autogenerated return type of unblockUserOffers"
type unblockUserOffersPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
}
"Autogenerated return type of updateHighlightedCard"
type updateHighlightedCardPayload {
  cardCollectionCard: CardCollectionCard
  cardCollectionSlot: CardCollectionSlot
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
}
"Autogenerated return type of updateSo5UserGroup"
type updateSo5UserGroupPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  so5UserGroup: So5UserGroup
}
"Autogenerated return type of updateSubscription"
type updateSubscriptionPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  subscribable: Subscribable
  subscription: EmailSubscription
}
"Autogenerated return type of updateUserProfile"
type updateUserProfilePayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  userProfile: UserProfile
}
"Autogenerated return type of updateUserSettings"
type updateUserSettingsPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  errors: [UserError!]!
  userSettings: UserSettings
}
"Autogenerated return type of upsertCommonDraft"
type upsertCommonDraftPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  draftError: So5CommonDraftError
  errors: [UserError!]!
}
"Autogenerated return type of verifyPhoneNumber"
type verifyPhoneNumberPayload {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  currentUser: CurrentUser
  errors: [UserError!]!
}
"Blockchain info"
interface BlockchainUserInterface {
  cardsCount: Int!
  ethVaultId: Int
  ethereumAddress: String!
  sorareAddress: String
  starkKey: String
  starkKeyRegistered: Boolean!
}
"Card Game Interface"
interface CardGameInterface {
  coverageStatus: CardCoverageStatus!
  gameForLeague(so5LeagueSlug: String = null, so5LeaderboardSlug: String = null): Game
  "Current card level"
  grade: Int!
  gradeAfterTransfer: Int!
  "So5Lineup that this card is being used in for the open So5Fixture"
  openedSo5Lineup: So5Lineup
  "Total card bonus (XP + Season bonus)"
  power(so5LeaderboardSlug: String = null): String!
  powerBreakdown(so5LeaderboardSlug: String = null): PowerBreakdown!
  powerMalusAfterTransfer: String!
  u23Eligible: Boolean!
  xp: Int!
  xpAfterTransfer: Int!
  "XP start range of current card level"
  xpNeededForCurrentGrade: Int!
  "XP end range of current card level"
  xpNeededForNextGrade: Int
}
"Card Market Resolvers"
interface CardMarketInterface {
  canBuy: Boolean!
  latestEnglishAuction: EnglishAuction
  liveSingleBuyOffers: [Offer!]!
  liveSingleSaleOffer: SingleSaleOffer
  myMintedSingleSaleOffer: SingleSaleOffer
  onSale: Boolean!
  openEnglishAuction: EnglishAuction
  priceRange: Range @deprecated(reason: "Use `Token.priceRange` instead")
  privateMinPrice: String
  publicMinPrice: String
}
interface DeckInterface {
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CardConnection!
  cardsCount: Int!
  deckCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): DeckCardConnection!
  deckCardsCount: Int!
  firstCard: Card
  id: ID!
  slug: String!
  user: User
}
interface EnglishAuctionInterface {
  bestBid: BidWithRates
  "The `bids` field cannot be nested within a list."
  bids(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): BidConnection!
  bidsCount: Int!
  blockchainId: String!
  cancelled: Boolean!
  cards: [Card!]!
  contentProvider: EnglishAuctionContentProvider
  creditCardFee: Float!
  "Current price, in wei."
  currentPrice: String!
  endDate: ISO8601DateTime!
  id: ID!
  "Minimum next bid amount, in wei."
  minNextBid: String!
  open: Boolean!
  slug: String!
  startDate: ISO8601DateTime!
  tokenAuction: TokenAuction!
}
"An object with an ID."
interface Node {
  "ID of the object."
  id: ID!
}
"User Notification"
interface NotificationInterface {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  read: Boolean!
  sport: Sport
  user: CurrentUser!
}
"An Offer"
interface OfferInterface {
  aasmState: String!
  acceptedAt: ISO8601DateTime
  blockchainId: String
  cancelledAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  creditCardFee: Float!
  endDate: ISO8601DateTime!
  id: ID!
  marketFeeWeiAmount: WeiAmount!
  sender: Ownerable!
  startDate: ISO8601DateTime!
  tokenOffer: TokenOffer!
}
"Card owner (contract or user)"
interface OwnerInterface {
  account: Account
  address: String!
  blockchain: String!
  card: Card!
  "The deal id that created this owner in case it comes from an offer"
  dealId: String @deprecated(reason: "no longer maintained")
  from: ISO8601DateTime!
  id: ID!
  migratorApproval: Boolean! @deprecated(reason: "use account.accountable.migratorApproved")
  newId: String @deprecated(reason: "use id")
  optimistic: Boolean!
  "Card price, in wei."
  price: String!
  referenceId: String
  transferType: String!
  userNonce: Int @deprecated(reason: "no longer maintained")
}
"Public user information"
interface PublicUserInfoInterface {
  allTimeBestDecksInFormation: [DeckInFormation!]! @deprecated(reason: "No longer maintained")
  awards: [UserAward!]!
  baseballProfile: UserSportProfile
  "The `bought_single_sale_offers` field cannot be nested within a list."
  boughtSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `bought_single_sale_token_offers` field cannot be nested within a list."
  boughtSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `buying_english_auctions` field cannot be nested within a list."
  buyingEnglishAuctions(
    "Returns auctions sorted by `startDate` in descending order when set."
    newlyListed: Boolean
  ): [EnglishAuction!]!
  "The `buying_token_auctions` field cannot be nested within a list."
  buyingTokenAuctions(
    "Returns auctions sorted by `startDate` in descending order when set."
    newlyListed: Boolean,sport: [Sport!]  ): [TokenAuction!]!
  cardCounts: CardCount!
  cardsCount: Int!
  createdAt: ISO8601DateTime!
  "The `custom_decks` field cannot be nested within a list."
  customDecks(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): CustomDeckConnection!
  "The `ended_with_no_buyer_single_sale_offers` field cannot be nested within a list."
  endedWithNoBuyerSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `ended_with_no_buyer_single_sale_token_offers` field cannot be nested within a list."
  endedWithNoBuyerSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `english_auctions` field cannot be nested within a list."
  englishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  ethVaultId: Int
  ethereumAddress: String!
  followed: EmailSubscription
  "The `followers` field cannot be nested within a list."
  followers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!
  "The `following` field cannot be nested within a list."
  following(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!
  footballProfile(variant: UserSportProfileVariant): UserSportProfile
  highlightedDeck: HighlightedDeck
  id: ID!
  "The `live_single_sale_offers` field cannot be nested within a list."
  liveSingleSaleOffers(
    "Returns single sale offers sorted by `startDate` in descending order when set."
    newlyListed: Boolean
  ): [SingleSaleOffer!]! @deprecated(reason: "Use the paginated version instead")
  "The `live_single_sale_token_offers` field cannot be nested within a list."
  liveSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  "The `lost_english_auctions` field cannot be nested within a list."
  lostEnglishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  "The `lost_token_auctions` field cannot be nested within a list."
  lostTokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
  nbaProfile: UserSportProfile
  nickname: String!
  "The `paginated_cards` field cannot be nested within a list."
  paginatedCards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  "The `paginated_live_single_sale_offers` field cannot be nested within a list."
  paginatedLiveSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  profile: UserProfile!
  "The `single_sale_offers` field cannot be nested within a list."
  singleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `single_sale_token_offers` field cannot be nested within a list."
  singleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  slug: String!
  "The `sold_single_sale_offers` field cannot be nested within a list."
  soldSingleSaleOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): SingleSaleOfferConnection!
  "The `sold_single_sale_token_offers` field cannot be nested within a list."
  soldSingleSaleTokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenOfferConnection!
  sorareAddress: String
  starkKey: String
  starkKeyRegistered: Boolean!
  "The `token_auctions` field cannot be nested within a list."
  tokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
  "The `won_english_auctions` field cannot be nested within a list."
  wonEnglishAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption  ): EnglishAuctionConnection!
  "The `won_token_auctions` field cannot be nested within a list."
  wonTokenAuctions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortByEndDate: SortingOption, sport: [Sport!]  ): TokenAuctionConnection!
}
"So5Leaderboard Rules"
interface So5LeaderboardRulesInterface {
  defaultAverageScore: AveragePlayerScore
  displayedRules: So5Rules
  rules: So5Rules
}
"Social pictures"
interface SocialPicturesInterface {
  socialPictureUrls: SocialPictureDerivative!
}
"Objects with publicly accessible cards"
interface TeamInterface {
  activeCompetitions: [Competition!]!
  "The `active_memberships` field cannot be nested within a list."
  activeMemberships(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): MembershipConnection!
  "The `active_players` field cannot be nested within a list."
  activePlayers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
  code: String
  colorBottom: String @deprecated(reason: "replaced by colorRight on customBanner")
  colorTop: String @deprecated(reason: "replaced by colorLeft on customBanner")
  country: Country!
  customBanner: CustomBanner
  founded: String
  "The `games` field cannot be nested within a list."
  games(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Start time (inclusive) of the game."
    startDate: ISO8601DateTime!,
    "End time (inclusive) of the game."
    endDate: ISO8601DateTime!
  ): GameConnection!
  id: ID!
  lastFiveGames: [Game!]!
  "The `latest_games` field cannot be nested within a list."
  latestGames(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): GameConnection!
  license: License! @deprecated(reason: "only exposed on cards")
  name: String!
  optaId: String
  pictureSecondaryUrl: String
  pictureUrl(derivative: String): String
  pictureUrlByRarity(derivative: String): Json! @deprecated(reason: "Replaced teamPictureUrl on CardType")
  "The `players` field cannot be nested within a list."
  players(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  ready: Boolean!
  "The `recent_departures` field cannot be nested within a list."
  recentDepartures(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): PlayerConnection!
  slug: String!
  upcomingGames(first: Int!): [Game]!
}
"Card token metadata"
interface TokenCardMetadataInterface {
  playerDisplayName: String!
  playerSlug: String!
  rarity: Rarity!
  seasonStartYear: Int!
  serialNumber: Int!
  singleCivilYear: Boolean!
  supply: Int!
  teamSlug: String!
}
"User Offer Interface"
interface UserOffersInterface {
  blockedUntil: ISO8601DateTime
  blockedUsers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserConnection!
  directOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,direction: OfferDirection!, sortType: SortingOption  ): OfferConnection!
  endedDirectOffersReceived(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption  ): OfferConnection!
  endedDirectOffersSent(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption  ): OfferConnection!
  endedTokenOffersReceived(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
  endedTokenOffersSent(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
  pendingDirectOffersReceived(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption  ): OfferConnection!
  pendingDirectOffersSent(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption  ): OfferConnection!
  pendingTokenOffersReceived(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
  pendingTokenOffersSent(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
  tokenOffers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,direction: OfferDirection!, sortType: SortingOption, sport: [Sport!] = [FOOTBALL, BASEBALL]  ): TokenOfferConnection!
}
"User social connections"
interface UserSocialInterface {
  followed: EmailSubscription
  "The `followers` field cannot be nested within a list."
  followers(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followersCount: Int!
  "The `following` field cannot be nested within a list."
  following(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int
  ): UserWithSubscriptionSlugConnection!
  followingCount: Int!
}
"Fast withdrawal"
interface WithFastWithdrawal {
  "Get a starkware conditional transfer request for a fast withdrawal"
  fastWithdrawal(
    "Amount to withdraw, in wei."
    amount: String!,
    "Destination Ethereum address."
    to: String!
  ): FastWithdrawal!
}
"Favorites"
interface WithFavoriteInterface {
  favoriteCards: [Card!]! @deprecated(reason: "Use `my_subscriptions` instead")
  favoriteClubs: [Club!]! @deprecated(reason: "Use `my_subscriptions` instead")
  favoritePlayers: [Player!]! @deprecated(reason: "Use `my_subscriptions` instead")
  mySubscriptions(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,types: [SubscribableType!], sortType: SortingOption  ): EmailSubscriptionConnection!
}
"Objects with memberships"
interface WithMemberships {
  activeClubMembership: Membership
  appearances: Int!
  beforeLastOwningMembership: Membership
  clubMemberships: [Membership!]!
  memberships: [Membership!]!
}
"Notifications"
interface WithNotifications {
  notifications(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,
    "Filters notifications by the specified categories when set."
    categories: [NotificationCategoryInput!],
    "Filters notifications by sports"
    sports: [Sport!]
  ): NotificationConnection!
  "Get notifications fields."
  notificationsDetails(
    "Filters notifications by the specified categories when set."
    categories: [NotificationCategoryInput!]
  ): Notifications!
  unreadNotificationsCount: Int!
}
"Objects with a picture with derivatives"
interface WithPictureInterface {
  pictureUrl(derivative: String): String
}
"Objects with publicly accessible cards"
interface WithPublicCardsInterface {
  "The `cards` field cannot be nested within a list."
  cards(
    "Returns the elements in the list that come after the specified cursor."
    after: String,
    "Returns the elements in the list that come before the specified cursor."
    before: String,
    "Returns the first _n_ elements from the list."
    first: Int,
    "Returns the last _n_ elements from the list."
    last: Int,age: Int, owned: Boolean, 
    "positions of the card capitalized"
    positions: [Position!],
    "rarities of the card in lowercase"
    rarities: [Rarity!],serialNumber: Int, shirtNumber: Int, customCardEditionName: String, slugs: [String!], playerSlugs: [String!], teamSlugs: [String!], assetIds: [String!], ownedSinceAfter: ISO8601DateTime  ): CardConnection!
}
"With Referral Interface"
interface WithReferralsInterface {
  referee: Boolean!
  refereeReward: ReferralReward
  referralAsReferee: Referral
  referralRewardsCount: Int!
  referralUrl: String!
  "Get the list of referrals"
  referrals(
    "Filters the referrals by sport."
    sport: Sport,
    "Page to retrieve. Defaults to 0."
    page: Int,
    "Maximum number of referrals to return. Defaults to 50."
    pageSize: Int,
    "Filters the returned referrals by `state` when set."
    state: ReferralState
  ): ReferralPaginated!
  referrer: User
  unclaimedReferralRewardsCount: Int!
}
interface WithSubscriptionsInterface {
  currentUserSubscription: EmailSubscription
  slug: String!
  subscriptionsCount: Int!
}
"Object that can be an account owner"
union AccountOwner = Contract | User
"Object that can be an account accountable"
union Accountable = CommonAccount | EthereumAccount | LoomAccount | StarkwareAccount
"Object that have a blockchain address to interact with the platform"
union BlockchainUser = AnonymousUser | User
"Object proposing challenges"
union Challengeable = So5Leaderboard
"Object that can be an EnglishAuction content provider"
union EnglishAuctionContentProvider = Club | Competition | NationalTeam
"User notification"
union Notification = AnnouncementNotification | AuctionNotification | CardCollectionNotification | CardNotification | ChallengeNotification | DecisiveActionNotification | DivisionChangeNotification | OfferNotification | ReferralRewardNotification | SaleNotification | So5LineupNotification | So5UserGroupNotification | UserAwardNotification
"Object that can be an owner"
union Ownerable = AnonymousUser | Contract | User
"Object that can be an operation of a PaymentIntent"
union PaymentIntentOperation = Bid | Offer | TokenPrimaryOffer
"Object that can be a tokenOperation of a PaymentIntent"
union PaymentIntentTokenOperation = TokenBid | TokenOffer | TokenPrimaryOffer
"Object that can be a referrer"
union Referrer = User | UserSource
"Object that can be subscribed to"
union Subscribable = Card | Club | Country | Player | User
"Type of a subscriber to a new card, player, country or club related auction"
union Subscriber = CurrentUser
"Object that can be a team"
union Team = Club | NationalTeam
"Offer or Auction"
union TokenDeal = TokenAuction | TokenOffer
"Sport token metadata"
union TokenMetadata = TokenBaseballMetadata | TokenFootballMetadata
"Object that can be an operation of a UserAccountEntry"
union UserAccountEntryOperation = Bid | EthMigration | FastWithdrawal | FullWithdrawalRequest | Offer | So5Reward | StarkwareWithdrawal | TokenWithdrawal | Withdrawal
"Object that can be an tokenOperation of a UserAccountEntry"
union UserAccountEntryTokenOperation = EthMigration | FastWithdrawal | FullWithdrawalRequest | So5Reward | StarkwareWithdrawal | TokenBid | TokenOffer | TokenWithdrawal | Withdrawal
enum Action {
  ACTIVITY
  GLOBAL_CUP_22_REFERRAL
}
enum AvailableDraftPlayersSorting {
  VALUE
  PERCENTAGE
}
enum AveragePlayerScore {
  LAST_FIVE_SO5_AVERAGE_SCORE
  LAST_FIFTEEN_SO5_AVERAGE_SCORE
}
enum Award {
  YOUR_BIGGEST_FAN
  OUT_THE_DOOR
  NATIONAL_SERVICE
  MATCHING_NUMBERS
  MAKING_IT_RAIN
  HIGHEST_BIDDER
  FIRST_DIP
  FIRST_COME_FIRST_SERVED
  FAVORITE_NUMBER
  CHILDHOOD_TEAM
}
enum AwardCategory {
  MANAGER
  COLLECTOR
}
enum BaseballPosition {
  UNKNOWN
  STARTING_PITCHER
  RELIEF_PITCHER
  FIRST_BASE
  THIRD_BASE
  DESIGNATED_HITTER
  CATCHER
  SECOND_BASE
  SHORTSTOP
  OUTFIELD
}
enum Blockchain {
  ETHEREUM
  LOOM
  NO_BLOCKCHAIN
  STARKWARE
}
enum CardCoverageStatus {
  LEGEND
  SPECIAL
  FULL
  PARTIAL
  NOT_COVERED
}
enum CardQuality {
  TIER_0
  TIER_1
  TIER_2
  TIER_3
  TIER_4
}
enum CardWasUpdatedEvent {
  "When an offer becomes live"
  offer_event_opened
  "When an offer is cancelled"
  offer_event_cancelled
  "When an offer is cancelled"
  offer_event_flagged
  "When an offer is settled"
  offer_event_accepted
  "When a bid was created on an auction"
  auction_event_bid
  "When an auction was successfully closed"
  auction_event_successfull
  "When an auction closes without bids"
  auction_event_closed
  "When an auction is cancelled"
  auction_event_cancelled
}
enum Collection {
  FOOTBALL
  FOOTBALL_NATIONAL_SERIES
  BASEBALL
  NBA
}
enum CommonDraftCampaignStatus {
  OPEN
  FINAL
  REDRAFTABLE
  CLOSED
}
enum CommonDraftCampaignType {
  ONBOARDING
  EXTRA
}
enum CompetitionFormat {
  DOMESTIC_LEAGUE
  INTERNATIONAL_CUP
  INTERNATIONAL_SUPER_CUP
  DOMESTIC_CUP
  DOMESTIC_SUPER_CUP
}
enum CompetitionType {
  CLUB
  INTERNATIONAL
}
enum CreditCardBrand {
  "American Express"
  AMERICAN_EXPRESS
  "Cartes Bancaires"
  CARTES_BANCAIRES
  "Diners Club"
  DINERS_CLUB
  "Discover"
  DISCOVER
  "JCB"
  JCB
  "MasterCard"
  MASTERCARD
  "UnionPay"
  UNION_PAY
  "Visa"
  VISA
  "Unknown"
  UNKNOWN
}
enum Currency {
  ETH
  FIAT
}
enum CustomRewardExperience {
  JERSEY
  TICKET
  EVENT
}
enum CustomSortingOption {
  DEFAULT
  CUSTOM
}
enum DeckCategory {
  ALL_TIME_BEST
  USER_FAVORITE
}
enum DeckFormation {
  FREE
  TWO_ONE_ONE
  ONE_TWO_ONE
  ONE_ONE_TWO
}
enum DepositProvider {
  MOONPAY
  RAMP
}
enum FiatCurrency {
  EUR
  USD
  GBP
}
enum FootballPosition {
  UNKNOWN
  FORWARD
  MIDFIELDER
  DEFENDER
  GOALKEEPER
  COACH
}
enum License {
  NOT_LICENSED
  PLAYERS_AND_CLUB
  PLAYERS_ONLY
  CLUB_ONLY
}
enum NBAPosition {
  UNKNOWN
  GUARD
  FORWARD
  CENTER
}
enum OAuthProvider {
  GOOGLE_OAUTH2
  FACEBOOK
}
enum OfferDirection {
  SENT
  RECEIVED
}
enum OfferType {
  SINGLE_SALE_OFFER
  SINGLE_BUY_OFFER
  DIRECT_OFFER
}
enum OnboardingStepEnum {
  CREATE_YOUR_CLUB
  SELECT_FAVORITE_CLUB
  WHAT_ARE_LEAGUES
  WINNING_A_LEAGUE
  EARNING_REWARDS
  GET_STARTED
  COMPOSE_TEAM
  CARD_SCARCITIES
  CARD_DETAILS
  FOLLOW_PLAYERS
  WELCOME_TO_MARKETPLACE
  MARKETPLACE_WALKTHROUGH
  CONGRATULATION
  SPECIAL_EVENT_DRAFT
}
enum OnboardingTaskEnum {
  ADD_FAVOURITE_CLUBS
  JOIN_ROOKIE
  COMPOSE_TEAM
  FOLLOW_PLAYER
  CONGRATULATION
  PLACE_FIRST_BID
  AFTER_COMPLETE
  SPECIAL_EVENT_DRAFT
}
enum OnboardingTaskState {
  TODO
  TO_CLAIM
  DONE
}
enum OwnerTransfer {
  TRANSFER
  MINT
  ENGLISH_AUCTION
  PACK
  SINGLE_SALE_OFFER
  DIRECT_OFFER
  SINGLE_BUY_OFFER
  REFERRAL
  REWARD
  WITHDRAWAL
  DEPOSIT
}
enum PaymentCurrency {
  ETH
  EUR
  USD
  GBP
}
enum PaymentIntentState {
  READY
  CANCELLED
  SPENT
}
enum Period {
  FIRST_HALF
  SECOND_HALF
  EXTRA_TIME_FIRST_HALF
  EXTRA_TIME_SECOND_HALF
  PENALTY_SHOOTOUT
  HALF_TIME
  END_OF_SECOND_HALF_BEFORE_EXTRA_TIME
  EXTRA_TIME_HALF_TIME
  END_OF_EXTRA_TIME_BEFORE_PENALTIES
  FULL_TIME
  PRE_MATCH
}
enum PicturePositioning {
  AUTO
  AS_IS
}
enum Position {
  Forward
  Midfielder
  Defender
  Goalkeeper
  Unknown
  Coach
}
enum Rarity {
  unique
  super_rare
  rare
  limited
  common
  custom_series
}
enum ReferralState {
  ALL
  EXPIRED
  COMPLETED
  IN_PROGRESS
}
enum RestrictionGroup {
  BLOCKCHAIN_GROUP
  ACADEMY_GROUP
}
enum ShippingState {
  READY_TO_CLAIM
  CLAIMED
}
enum SkinPosition {
  BANNER
  SHIELD
  LOGO
}
enum SkinQuality {
  AMATEUR
  SEMI_PRO
  PRO
  LEGEND
}
enum So5State {
  PAST
  LIVE
  UPCOMING
}
enum SortingOption {
  ASC
  DESC
}
enum Sport {
  FOOTBALL
  BASEBALL
  NBA
}
enum StatCategory {
  GENERAL
  DEFENDING
  POSSESSION
  PASSING
  ATTACKING
  GOALKEEPING
  POSITIVE_DECISIVE_STAT
  NEGATIVE_DECISIVE_STAT
  UNKNOWN
}
enum SubscribableType {
  CARD
  PLAYER
  COUNTRY
  TEAM
  USER
  BASEBALL_CARD
  BASEBALL_PLAYER
  NBA_CARD
  NBA_PLAYER
}
enum TermsAndConditionsStatus {
  "Has never approved any TCUs"
  INITIAL
  "Has approved TCUs but those are now outdated"
  OUTDATED
  "Has approved the latest TCUs"
  ACCEPTED
}
enum Tradeable {
  "The card is stored in the Sorare account"
  INTERNAL @deprecated(reason: "Use WalletStatus instead")
  "The card is stored in the mapped account"
  MAPPED @deprecated(reason: "Use WalletStatus instead")
  "The card is neither in the Sorare account nor in the mapped account"
  NO
  "The card has not yet been transferred"
  NOT_YET
  "The card is on sale"
  ON_SALE @deprecated(reason: "Not needed anymore")
  "The card is transferrable"
  YES
  "The card has no owner or does not belong to the user"
  UNDEFINED
  "The card should be deposited on Sorare before being traded"
  DEPOSIT_REQUIRED
}
enum TransactionStatus {
  "Transaction is currently minting"
  PENDING
  "Transaction confirmed"
  CONFIRMED
  "Transaction failed"
  FAILED
  "Transaction cancelled"
  CANCELLED
  "Transaction dropped"
  DROPPED
}
enum UserAccountEntryEntry {
  PAYMENT
  DEPOSIT
  WITHDRAWAL
  REWARD
  ETH_MIGRATION_ROUNDING
  WITHDRAWAL_FEE
  PAYMENT_FEE
}
enum UserAccountEntryState {
  PENDING
  CANCELLED
  CONFIRMED
}
enum UserSportProfileOnboardingStatus {
  NONE
  STARTED
  COMPLETED
}
enum UserSportProfileVariant {
  NONE
  GLOBAL_CUP_22
}
enum WalletStatus {
  "The card is stored in the Sorare account"
  INTERNAL
  "The card is stored in the mapped account"
  MAPPED
  "The card has no owner or does not belong to the user"
  UNKNOWN
}
enum WithdrawalStatus {
  "Withdrawal is created and should be confirmed"
  CREATED
  "Withdrawal is confirmed"
  CONFIRMED
  "Withdrawal has been published on the blockchain"
  SETTLEMENT_PUBLISHED
  "Withdrawal has settled on the blockchain"
  SETTLED
  "Withdrawal has failed"
  SETTLEMENT_FAILED
  "Withdrawal was cancelled"
  CANCELLED
}
input AvailableDraftPlayersSortInput {
  direction: SortingOption!
  type: AvailableDraftPlayersSorting!
}
"An intent to mint cards for other users"
input MintCardsForUsersInput {
  "The slug of the player that should be on the Card. Either that or the tier of the player must be given."
  playerSlug: String
  "The tier of the player that should be on the Card. Either that or the slug of the player must be given."
  tier: CardQuality
  "The slug of the user that will receive the Card."
  userSlug: String!
  "The rarity of the Card."
  rarity: Rarity!
}
"A notification filter"
input NotificationCategoryInput {
  type: String!
  name: String!
}
"A notification preference"
input NotificationPreferenceInput {
  name: String!
  value: Json!
}
"An object including all arguments to migrate an offer"
input OfferMigrationInput {
  migrateInternalCardsSignature: String
  migrateMappedCardsSignature: String
  expirationBlock: Int!
}
input RangeInput {
  min: Int
  max: Int
}
"A SO5 Appearance - a card selected in a team for a SO5 fixture"
input So5AppearanceInput {
  cardSlug: String!
  captain: Boolean!
}
"A SO5 Draftable Player Appearance - a player selected in a common draft campaign for a SO5 fixture"
input So5DraftablePlayerAppearanceInput {
  draftablePlayerId: ID!
  captain: Boolean!
}
"An encrypted private key"
input SorarePrivateKeyAttributes {
  iv: String!
  salt: String!
  encryptedPrivateKey: String!
}
input StarkSignatureInput {
  "Signature of the associated LimitOrder object, transported as JSON. Computed with `@sorare/crypto`."
  data: String!
  "Nonce of the associated LimitOrder object. Retrieved through the `limitOrders` field."
  nonce: Int!
  "Mandatory if expirationTimestamp is not set"
  expiration: ISO8601DateTime
  "Required if expiration is not set"
  expirationTimestamp: Int
  starkKey: String
}
input SubscribableInput {
  type: String!
  slug: String!
}
"Autogenerated input type of UnblockEmail"
input UnblockEmailInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}
"A user lifecycle entry"
input UserLifecycleInput {
  name: String!
  value: Json!
}
"Utm params"
input UtmInput {
  utmSource: String
  utmMedium: String
  utmCampaign: String
  utmTerm: String
  utmContent: String
}
"Autogenerated input type of acceptOffer"
input acceptOfferInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "List of signed LimitOrder objects."
  starkSignatures: [StarkSignatureInput!]!
  blockchainId: String!
  migrationData: OfferMigrationInput
}
"Autogenerated input type of acceptTerms"
input acceptTermsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  acceptTerms: Boolean!
  acceptPrivacyPolicy: Boolean!
  acceptGameRules: Boolean!
  agreedToReceiveOffersFromPartners: Boolean
  tcuToken: String
}
"Autogenerated input type of addCardsToDeck"
input addCardsToDeckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  deckSlug: String!
  cardSlugs: [String!]!
}
"Autogenerated input type of addEmailToList"
input addEmailToListInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  email: String!
  name: String!
  utmParams: UtmInput
  recaptchaToken: String!
}
"Autogenerated input type of addFavouriteClubs"
input addFavouriteClubsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  subscribables: [SubscribableInput!]!
}
"Autogenerated input type of approveMigrator"
input approveMigratorInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  address: String!
  nonce: Int!
  signature: String!
}
"Autogenerated input type of bid"
input bidInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "List of signed LimitOrder objects."
  starkSignatures: [StarkSignatureInput!]!
  auctionId: ID!
  "Bid amount, in wei."
  amount: String!
}
"Autogenerated input type of blockUserOffers"
input blockUserOffersInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  userSlug: String!
}
"Autogenerated input type of buySkin"
input buySkinInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  skinId: ID!
}
"Autogenerated input type of cancelEthBankWithdrawals"
input cancelEthBankWithdrawalsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}
"Autogenerated input type of cancelFastWithdrawal"
input cancelFastWithdrawalInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  fastWithdrawalId: ID!
}
"Autogenerated input type of cancelOffer"
input cancelOfferInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  blockchainId: String!
}
"Autogenerated input type of cancelWithdrawal"
input cancelWithdrawalInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  withdrawalId: ID!
}
"Autogenerated input type of checkPhoneNumberVerificationCode"
input checkPhoneNumberVerificationCodeInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  code: String!
}
"Autogenerated input type of claimAward"
input claimAwardInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  award: Award!
}
"Autogenerated input type of claimCardDrop"
input claimCardDropInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  task: OnboardingTaskEnum!
}
"Autogenerated input type of claimReferralReward"
input claimReferralRewardInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  referralRewardId: ID!
}
"Autogenerated input type of claimReward"
input claimRewardInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  so5RewardId: ID!
}
"Autogenerated input type of completeOnboardingTask"
input completeOnboardingTaskInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  task: OnboardingTaskEnum!
}
"Autogenerated input type of confirmEmail"
input confirmEmailInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  token: String!
}
"Autogenerated input type of confirmSo5Lineups"
input confirmSo5LineupsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  so5LineupIds: [ID!]!
}
"Autogenerated input type of createCardWithdrawal"
input createCardWithdrawalInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "List of signed LimitOrder objects."
  starkSignatures: [StarkSignatureInput!]!
  cardSlug: String
  destination: String!
  assetId: String
}
"Autogenerated input type of createCustomDeck"
input createCustomDeckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  name: String!
  visible: Boolean!
}
"Autogenerated input type of createDirectOffer"
input createDirectOfferInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "List of signed LimitOrder objects."
  starkSignatures: [StarkSignatureInput!]!
  "ID used as unique deal identifier. Consider using `crypto.getRandomValues(new Uint32Array(4)).join()` to generate one."
  dealId: String!
  receiveCardsSlugs: [String!]
  receiveAssetIds: [String!]
  receiveWeiAmount: WeiAmount
  sendCardsSlugs: [String!]
  sendAssetIds: [String!]
  sendWeiAmount: WeiAmount!
  receiverSlug: String!
  migrationData: OfferMigrationInput
  "Number of seconds this offer should be valid"
  duration: Int
  counteredOfferId: String
}
"Autogenerated input type of createDraftAndSo5Lineup"
input createDraftAndSo5LineupInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  so5LeaderboardId: ID!
  printablePlayerIds: [ID!]!
  so5DraftablePlayerAppearances: [So5DraftablePlayerAppearanceInput!]!
  commonDraftCampaignSlug: String!
}
"Autogenerated input type of createEthBankWithdrawalIntent"
input createEthBankWithdrawalIntentInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  amount: String!
}
"Autogenerated input type of createEthMigration"
input createEthMigrationInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  weiAmount: String!
  signature: String!
  nonce: String!
}
"Autogenerated input type of createEthVault"
input createEthVaultInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}
"Autogenerated input type of createFastWithdrawal"
input createFastWithdrawalInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "List of signed LimitOrder objects."
  starkSignatures: [StarkSignatureInput!]!
  amount: String!
  salt: String!
  to: String!
}
"Autogenerated input type of createOrUpdateSingleBuyOfferMinPrice"
input createOrUpdateSingleBuyOfferMinPriceInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  cardSlug: String
  assetId: String
  amount: String!
  isPrivate: Boolean!
}
"Autogenerated input type of createOrUpdateSo5Lineup"
input createOrUpdateSo5LineupInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  so5LeaderboardId: ID!
  so5LineupId: ID
  name: String
  so5Appearances: [So5AppearanceInput!]!
  draft: Boolean = false
}
"Autogenerated input type of createPaymentIntent"
input createPaymentIntentInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  id: ID!
  weiAmount: String
  saveCard: Boolean
  "Signed intent."
  signature: String
}
"Autogenerated input type of createSingleBuyOffer"
input createSingleBuyOfferInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "List of signed LimitOrder objects."
  starkSignatures: [StarkSignatureInput!]!
  "ID used as unique deal identifier. Consider using `crypto.getRandomValues(new Uint32Array(4)).join()` to generate one."
  dealId: String!
  cardSlug: String
  assetId: String
  price: WeiAmount!
}
"Autogenerated input type of createSingleSaleOffer"
input createSingleSaleOfferInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "List of signed LimitOrder objects."
  starkSignatures: [StarkSignatureInput!]!
  "ID used as unique deal identifier. Consider using `crypto.getRandomValues(new Uint32Array(4)).join()` to generate one."
  dealId: String!
  cardSlug: String
  assetId: String
  price: WeiAmount!
  startDate: ISO8601DateTime
  "Number of seconds this offer should be valid"
  duration: Int
  migrationData: OfferMigrationInput
}
"Autogenerated input type of createSo5UserGroup"
input createSo5UserGroupInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  tournamentType: String
  division: Int
  displayName: String!
  description: String
  picture: File
  logoId: ID
  startGameWeek: Int
  endGameWeek: Int
}
"Autogenerated input type of createSubscription"
input createSubscriptionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  subscribable: SubscribableInput!
  interactionContext: String
}
"Autogenerated input type of createWithdrawal"
input createWithdrawalInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  amount: String!
  signature: String!
  agreedFeeAmount: String
  dealId: String!
  to: String!
}
"Autogenerated input type of deleteCustomDeck"
input deleteCustomDeckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  deckSlug: String!
}
"Autogenerated input type of deleteSo5Lineup"
input deleteSo5LineupInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  so5LineupId: ID!
}
"Autogenerated input type of deleteSo5UserGroup"
input deleteSo5UserGroupInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  so5UserGroupId: ID!
}
"Autogenerated input type of deleteSubscription"
input deleteSubscriptionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  slug: String!
}
"Autogenerated input type of deleteUserSo5Lineups"
input deleteUserSo5LineupsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  so5FixtureId: ID!
  so5LeagueIds: [ID!]
}
"Autogenerated input type of destroyAccount"
input destroyAccountInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  password: String!
}
"Autogenerated input type of destroyReferral"
input destroyReferralInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  referralId: ID!
}
"Autogenerated input type of detachPaymentMethod"
input detachPaymentMethodInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  paymentMethod: String!
}
"Autogenerated input type of disable2fa"
input disable2faInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  password: String!
  otpAttempt: String!
}
"Autogenerated input type of disconnectOmniauthProvider"
input disconnectOmniauthProviderInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  provider: String!
}
"Autogenerated input type of editCardInDeck"
input editCardInDeckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  deckSlug: String!
  cardSlug: String!
  newIndex: Int!
}
"Autogenerated input type of editCustomDeck"
input editCustomDeckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  deckSlug: String!
  name: String!
  visible: Boolean!
  newIndex: Int
}
"Autogenerated input type of enable2fa"
input enable2faInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  otpAttempt: String!
}
"Autogenerated input type of generateActionRewardPickablePlayers"
input generateActionRewardPickablePlayersInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  actionRewardId: ID!
}
"Autogenerated input type of generateOtpBackupCodes"
input generateOtpBackupCodesInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}
"Autogenerated input type of joinSo5UserGroup"
input joinSo5UserGroupInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  joinSecret: String!
}
"Autogenerated input type of markNotificationsAsRead"
input markNotificationsAsReadInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  notificationId: String
}
"Autogenerated input type of mintCardsForUsers"
input mintCardsForUsersInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  intents: [MintCardsForUsersInput!]!
}
"Autogenerated input type of pickActionRewardPlayers"
input pickActionRewardPlayersInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  actionRewardId: ID!
  playerSlugs: [String!]!
}
"Autogenerated input type of prepareAcceptOffer"
input prepareAcceptOfferInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  "The `blockchainId` of the offer to accept."
  dealId: String!
}
"Autogenerated input type of prepareBid"
input prepareBidInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  englishAuctionId: String!
  bidAmountWei: String!
}
"Autogenerated input type of prepareCardWithdrawal"
input prepareCardWithdrawalInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  cardSlug: String
  destination: String
  assetId: String
}
"Autogenerated input type of prepareEthDeposit"
input prepareEthDepositInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  weiAmount: WeiAmount!
}
"Autogenerated input type of prepareOffer"
input prepareOfferInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  type: OfferType
  sendCardsSlugs: [String!]
  sendAssetIds: [String!]
  receiveCardsSlugs: [String!]
  receiveAssetIds: [String!]
  sendWeiAmount: WeiAmount!
  receiveWeiAmount: WeiAmount!
  receiverSlug: String
}
"Autogenerated input type of prepareTokenDeposit"
input prepareTokenDepositInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  assetId: String!
}
"Autogenerated input type of rejectOffer"
input rejectOfferInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  blockchainId: String!
  block: Boolean
}
"Autogenerated input type of relayCall"
input relayCallInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  encodedFunction: String!
  extraGas: Int!
  signature: String!
}
"Autogenerated input type of removeCardFromDeck"
input removeCardFromDeckInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  deckSlug: String!
  cardSlug: String!
}
"Autogenerated input type of removeUserFromSo5UserGroup"
input removeUserFromSo5UserGroupInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  userId: String!
  so5UserGroupId: String!
}
"Autogenerated input type of requestReceipt"
input requestReceiptInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  paymentId: ID!
}
"Autogenerated input type of resendConfirmationInstructions"
input resendConfirmationInstructionsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  recaptchaToken: String!
}
"Autogenerated input type of resetPrivateKey"
input resetPrivateKeyInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  starkKey: String
}
"Autogenerated input type of resumeOnboarding"
input resumeOnboardingInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}
"Autogenerated input type of setDeviceToken"
input setDeviceTokenInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  devicePlatform: String!
  deviceToken: String!
  disable: Boolean = false
}
"Autogenerated input type of signIn"
input signInInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  email: String
  password: String
  otpSessionChallenge: String
  otpAttempt: String
  gaClientId: String
  deviceFingerprint: String
}
"Autogenerated input type of signInWithOAuth"
input signInWithOAuthInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  idToken: String!
  provider: OAuthProvider!
}
"Autogenerated input type of signOutFromAllDevices"
input signOutFromAllDevicesInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}
"Autogenerated input type of signUp"
input signUpInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  nickname: String!
  email: String!
  password: String!
  certified: String
  agreedToReceiveOffersFromPartners: Boolean
  recaptchaToken: String!
  sorareAddress: String!
  sorarePrivateKey: SorarePrivateKeyAttributes!
  sorarePrivateKeyBackup: String!
  starkKey: String
  referrer: String
  impactClickId: String
  gaClientId: String
  utmParams: UtmInput
  "The path the new User is from (to be used to redirect him after email confirmation)"
  fromPath: String
  acceptTerms: Boolean
  acceptPrivacyPolicy: Boolean
  acceptGameRules: Boolean
}
"Autogenerated input type of skipOnboarding"
input skipOnboardingInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
}
"Autogenerated input type of unblockUserOffers"
input unblockUserOffersInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  userSlug: String!
}
"Autogenerated input type of updateHighlightedCard"
input updateHighlightedCardInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  cardCollectionCardId: ID!
}
"Autogenerated input type of updateSo5UserGroup"
input updateSo5UserGroupInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  so5UserGroupId: ID!
  displayName: String
  description: String
  picture: File
  logoId: ID
  joinDisabled: Boolean
}
"Autogenerated input type of updateSubscription"
input updateSubscriptionInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  slug: String!
  rarities: [String!]!
  enabled: Boolean!
}
"Autogenerated input type of updateUserProfile"
input updateUserProfileInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  nickname: String
  status: String
  clubName: String
  picture: File
  clubBannerId: ID
  clubShieldId: ID
}
"Autogenerated input type of updateUserSettings"
input updateUserSettingsInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  notificationPreference: NotificationPreferenceInput
  lifecycle: UserLifecycleInput
  locale: String
  currency: Currency
  fiatCurrency: FiatCurrency
  lastWeb3Provider: String
  hideBalance: Boolean
  hideCommonCards: Boolean
  referrerPreferredRewardSport: Sport
}
"Autogenerated input type of upsertCommonDraft"
input upsertCommonDraftInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  commonDraftCampaignSlug: String!
  so5LeaderboardSlug: String!
  printablePlayerIds: [ID!]!
  dryRun: Boolean = false
  force: Boolean = false
}
"Autogenerated input type of verifyPhoneNumber"
input verifyPhoneNumberInput {
  "A unique identifier for the client performing the mutation."
  clientMutationId: String
  phoneNumber: String!
}
